{"version":3,"sources":["Components/Input.js","Components/FixedInformationSection.js","Components/Suggestion.js","Components/SuggestionList.js","Components/FoodItem.js","Components/ListSection.js","Components/Output.js","hooks/useLocalStorage.js","App.js","index.js"],"names":["Input","id","type","name","value","onChange","description","placeholder","unit","autoComplete","event","FixedInformationSection","setBloodSugar","setTargetBloodSugar","setCorrectionFactor","setCarbohydrateFactor","bloodSugar","targetBloodSugar","correctionFactor","carbohydrateFactor","className","toString","target","Suggestion","suggestionText","handleSuggestionClick","onClick","SuggestionList","allSuggestions","searchingText","matchingSuggestions","filter","slice","length","toLowerCase","map","key","Math","random","FoodItem","isPer100gSlideActive","per100gSlide","perPieceSlide","foodNameSuggestions","handleIsIntermealChange","handlePer100gSlideValueChange","handlePerPieceSlideValueChange","deleteFoodItem","handleSlideChange","per100gSlideHtml","checked","isIntermeal","shouldDisplaySuggestions","grams","carbohydratesPer100Grams","perPieceSlideHtml","numberOfPieces","carbohydratesPerPiece","ListSection","foodItems","addNewFoodItem","element","Output","totalIE","totalMainMealKE","totalIntermealKE","totalKE","totalCorrectionInsulin","outputRef","ref","undefined","style","fontWeight","SwiperCore","use","Pagination","useLocalStorage","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","PREFIX","hasRerenderedSince60sec","App","lastSavedData","setLastSavedData","setFoodNameSuggestions","getCurrentDayTime","setFoodItems","setTotalIE","setTotalKE","setTotalCorrectionInsulin","setTotalIntermealKE","setTotalMainMealKE","useRef","correctFoodItems","foodItemsArg","foodItem","slide1","activeSlideIdx","slide2","capitalize","string","toUpperCase","Date","toLocaleTimeString","split","hours","minutes","time","toNumberFormat","newFoodItems","isNameValid","newFoodNameSuggestion","toAddFoodNameSuggestions","newFoodNameSuggestions","Array","isArray","NewFoodNameSuggestion","some","foodNameSuggestion","addNewFoodNameSuggestions","removeItem","toDeleteFoodNameSuggestion","removeIdx","idx","splice","deleteFoodNameSuggestion","hasNameChanged","stringCopy","replace","number","parseFloat","Number","isNaN","calculateIE","shouldScroll","shouldDisplayError","ERROR_MESSAGE","areItemsTypeofNumber","items","every","item","calculateKE","alert","calculateCorrectionInsulin","correctionInsulin","round","KE","intermealKE","foodItemKE","IE","setTimeout","current","scrollIntoView","smooth","setInterval","window","location","reload","marginBottom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f462313.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Input(\r\n    {id, type='text', name='',value='', onChange='', description='', placeholder='', unit=''}) {\r\n    return (\r\n        <div>\r\n            <label> \r\n                {description}\r\n            </label>\r\n            <br />\r\n            <input\r\n                type={type}\r\n                autoComplete='off'\r\n                id={id}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange === '' ? () => 0 : (event) => onChange(event)}\r\n            ></input>\r\n            <label>\r\n                {unit}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\n\r\nexport default function FixedInformationSection(\r\n    {setBloodSugar, \r\n    setTargetBloodSugar, \r\n    setCorrectionFactor,\r\n    setCarbohydrateFactor,\r\n    bloodSugar, \r\n    targetBloodSugar, \r\n    correctionFactor, \r\n    carbohydrateFactor\r\n    }) {\r\n    \r\n    return (\r\n        <div className='space-around'>\r\n            <Input \r\n                name = 'BloodSugar'\r\n                value = {bloodSugar.toString()}\r\n                description = 'Blutzucker'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'TargetBloodSugar'\r\n                value = {targetBloodSugar}\r\n                description = 'Blutzucker Zielwert'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setTargetBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CorrectionFactor'\r\n                value = {correctionFactor}\r\n                description = 'Korrektur-Faktor'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setCorrectionFactor(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CarbohydrateFactor'\r\n                value = {carbohydrateFactor}\r\n                description = 'KE-Faktor'\r\n                onChange = {(event) => setCarbohydrateFactor(event.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Suggestion({suggestionText, handleSuggestionClick}) {\r\n    return (\r\n        <li\r\n            onClick={() => handleSuggestionClick(suggestionText)}\r\n        >\r\n            {suggestionText}\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport Suggestion from './Suggestion.js'\r\n\r\nexport default function SuggestionList({allSuggestions, searchingText, handleSuggestionClick}) {\r\n    \r\n    const matchingSuggestions = searchingText === '' ? [] : allSuggestions.filter(suggestionText => {\r\n        const potentialMatch = suggestionText.slice(0, searchingText.length)\r\n        return potentialMatch.toLowerCase() === searchingText.toLowerCase()\r\n    })\r\n    \r\n    return (\r\n        <div>\r\n            {matchingSuggestions.length !== 0 && <ul className='suggestion-list'>\r\n                {matchingSuggestions.map(suggestionText => <Suggestion \r\n                    key={Math.random()} \r\n                    suggestionText={suggestionText} \r\n                    handleSuggestionClick={handleSuggestionClick}\r\n                />)}\r\n            </ul>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Swiper, SwiperSlide} from 'swiper/react'\r\nimport SwiperCore, {Pagination} from 'swiper'\r\nimport 'swiper/swiper-bundle.min.css'\r\n\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\nimport SuggestionList from './SuggestionList.js'\r\n\r\nSwiperCore.use([Pagination])\r\n\r\nexport default function FoodItem(\r\n    {id, \r\n    isPer100gSlideActive=true,\r\n    per100gSlide={},\r\n    perPieceSlide={},\r\n\r\n    foodNameSuggestions,\r\n    handleIsIntermealChange, \r\n    handlePer100gSlideValueChange,\r\n    handlePerPieceSlideValueChange,\r\n    deleteFoodItem,\r\n    handleSuggestionClick,\r\n    handleSlideChange\r\n    }) {\r\n\r\n    const per100gSlideHtml = \r\n    <>\r\n        <label className='intermeal-checkbox'>\r\n                <input\r\n                    type = 'checkbox'\r\n                    checked = {per100gSlide.isIntermeal}\r\n                    onChange = {() => handleIsIntermealChange(id, 1)}\r\n                ></input> ZM?\r\n        </label>\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'name'\r\n            description = 'Name'\r\n            value = {per100gSlide.name}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n        />\r\n        {per100gSlide.shouldDisplaySuggestions && <SuggestionList \r\n            allSuggestions={foodNameSuggestions}\r\n            searchingText={per100gSlide.name}\r\n            handleSuggestionClick={(suggestionText) => handleSuggestionClick(suggestionText, id)}\r\n        />}\r\n\r\n        <Input\r\n            id = {id}\r\n            name = 'grams'\r\n            type='number'\r\n            description = 'Gramm'\r\n            value = {per100gSlide.grams}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n        />\r\n        <Input\r\n            id = {id}\r\n            name = 'carbohydratesPer100Grams'\r\n            type='number'\r\n            description = 'Kohlenhydrate pro 100g'\r\n            value = {per100gSlide.carbohydratesPer100Grams}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n        />\r\n    </>\r\n\r\n    const perPieceSlideHtml = \r\n    <>\r\n         <label className='intermeal-checkbox'>\r\n                <input\r\n                    type = 'checkbox'\r\n                    checked = {perPieceSlide.isIntermeal}\r\n                    onChange = {() => handleIsIntermealChange(id, 2)}\r\n                ></input> ZM?\r\n        </label>\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'name'\r\n            description = 'Name'\r\n            value = {perPieceSlide.name}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n        />\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'numberOfPieces'\r\n            type='number'\r\n            description = 'Anzahl'\r\n            value = {perPieceSlide.numberOfPieces}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n        />\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'carbohydratesPerPiece'\r\n            type='number'\r\n            description = 'Kohlenhydrate pro Stück'\r\n            value = {perPieceSlide.carbohydratesPerPiece}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n        />\r\n    </>\r\n\r\n    const slides = [per100gSlideHtml, perPieceSlideHtml]\r\n\r\n    return (\r\n        <div>\r\n            <p className='center-elements'>\r\n                <button\r\n                    className={`per-100g-button ${isPer100gSlideActive && 'active-button'}`}\r\n                    onClick={() => handleSlideChange(id, true)}\r\n                >pro 100g</button>\r\n                \r\n                <button\r\n                    className={`per-piece-button ${!isPer100gSlideActive && 'active-button'}`}\r\n                    onClick={() => handleSlideChange(id, false)}\r\n                >pro Stück</button>\r\n            </p>\r\n\r\n            <div className='space-around'>\r\n                <button\r\n                    className = 'delete-food-item-button'\r\n                    onClick={() => deleteFoodItem(id)}\r\n                ></button>\r\n\r\n                {isPer100gSlideActive ? per100gSlideHtml : perPieceSlideHtml}\r\n\r\n                {/*  <Swiper \r\n                    id='main'\r\n                    tag='section'\r\n                    wrapperTag='ul'\r\n                    pagination={{clickable:true}}\r\n                    onSlideChange={(swiper) => handleSlideChange(id, swiper.activeIndex)}\r\n                    >\r\n                    {slides.map((slide, idx) => (\r\n                        <SwiperSlide \r\n                            key={idx}\r\n                            tag='li'\r\n                            style= {{ listStyle: 'none' }}\r\n                            >\r\n                            {slide}\r\n                        </SwiperSlide>\r\n                    ))}\r\n                    \r\n                </Swiper> */}\r\n\r\n            </div>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport FoodItem from './FoodItem'\r\n\r\nexport default function ListSection(\r\n    {foodItems=[], \r\n    foodNameSuggestions=[],\r\n    addNewFoodItem, \r\n    handleIsIntermealChange, \r\n    handlePer100gSlideValueChange, \r\n    handlePerPieceSlideValueChange, \r\n    deleteFoodItem,\r\n    handleSuggestionClick,\r\n    handleSlideChange\r\n    }) {\r\n    return (\r\n        <div>\r\n            <h3>Elemente</h3>\r\n            {foodItems.map(element => \r\n                <FoodItem \r\n                    key={element.key}\r\n                    id={element.id}\r\n                    isPer100gSlideActive={element.isPer100gSlideActive}\r\n                    per100gSlide={element.per100gSlide}\r\n                    perPieceSlide={element.perPieceSlide}\r\n                    \r\n                    foodNameSuggestions={foodNameSuggestions}\r\n                    handleIsIntermealChange={handleIsIntermealChange}\r\n                    handlePer100gSlideValueChange={handlePer100gSlideValueChange}\r\n                    handlePerPieceSlideValueChange={handlePerPieceSlideValueChange}\r\n                    deleteFoodItem={deleteFoodItem}\r\n                    handleSuggestionClick={handleSuggestionClick}\r\n                    handleSlideChange={handleSlideChange}\r\n             />)}\r\n             \r\n            <p>\r\n                <button \r\n                    className='add-new-food-item-button'\r\n                    onClick={() => addNewFoodItem()}\r\n                ></button>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Output(\r\n    {totalIE, totalMainMealKE, totalIntermealKE, totalKE, totalCorrectionInsulin, outputRef}) {\r\n    return (\r\n        <div ref={outputRef}>\r\n            {!(totalIE === '' || totalIE == undefined || totalIE <= 0) ? \r\n                <div>\r\n                    <hr />\r\n\r\n                    <div className='space-around'>\r\n                        \r\n                        <p className='output' >\r\n                            Hauptmahlzeit-KE : {totalMainMealKE} KE <br />\r\n                            Zwischenmahlzeit-KE : {totalIntermealKE} KE <br />\r\n                            Gesamt-KE: {totalKE} KE <br />\r\n                            <br />\r\n                            Korrektur-Insulin: {totalCorrectionInsulin} IE  <br />\r\n                            <span style={{fontWeight: 'bold'}}> Gesamt-Insulin: {totalIE} IE </span>\r\n                        </p>\r\n                            \r\n                    </div>\r\n                </div>\r\n            : ''}\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    // get value\r\n    const prefixedKey = PREFIX + key\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if(jsonValue != null) return JSON.parse(jsonValue)\r\n        if(typeof initialValue === \"function\"){\r\n            return initialValue()\r\n        } else{\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    // save value\r\n    useEffect(() =>{\r\n        if(value != null)\r\n            localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [prefixedKey, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import React, {useState, useRef, useEffect} from 'react'\r\n\r\n\r\nimport './css/style.css'\r\nimport FixedInformationSection from './Components/FixedInformationSection'\r\nimport ListSection from './Components/ListSection'\r\nimport Output from './Components/Output.js'\r\n\r\nimport useLocalStorage from './hooks/useLocalStorage.js'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\nlet hasRerenderedSince60sec = false\r\n\r\nexport default function App() {\r\n    const [lastSavedData, setLastSavedData] = useLocalStorage('lastSavedData')\r\n    const [foodNameSuggestions, setFoodNameSuggestions] = useLocalStorage('foodNameSuggestions', [])\r\n\r\n    const [bloodSugar, setBloodSugar] = useState('')\r\n    const [targetBloodSugar, setTargetBloodSugar] = useLocalStorage(`${getCurrentDayTime()}-targetBloodSugar`)\r\n    const [correctionFactor, setCorrectionFactor] = useLocalStorage(`${getCurrentDayTime()}-correctionFactor`)\r\n    const [carbohydrateFactor, setCarbohydrateFactor] = useLocalStorage(`${getCurrentDayTime()}-carbohydrateFactor`)\r\n\r\n    const [foodItems, setFoodItems] = useLocalStorage('foodItems', [])\r\n\r\n    const [totalIE, setTotalIE] = useState('')\r\n    const [totalKE, setTotalKE] = useState('')\r\n    const [totalCorrectionInsulin, setTotalCorrectionInsulin] = useState('')\r\n    const [totalIntermealKE, setTotalIntermealKE] = useState('')\r\n    const [totalMainMealKE, setTotalMainMealKE] = useState('')\r\n\r\n    const outputRef = useRef()\r\n\r\n    useEffect(() => {\r\n        setFoodItems( correctFoodItems(foodItems) )\r\n        setLastSavedData( correctLastSavedData() )\r\n\r\n        // not working has some old state of foodItems even if the state has changed\r\n        /* setTimeout(() => \r\n            calculateIE(false, false)\r\n        , 100) */\r\n        \r\n\r\n        // update every minute\r\n        setInterval(() => {\r\n            if(!hasRerenderedSince60sec)\r\n                refreshPage()\r\n            else\r\n                hasRerenderedSince60sec = false\r\n            \r\n        }, 60000);\r\n    }, [])\r\n\r\n    function correctFoodItems(foodItemsArg){\r\n        const newFoodItems = foodItemsArg.map(foodItem => {\r\n            if(foodItem.slide1 == null) return foodItem\r\n\r\n            let {\r\n                activeSlideIdx:isPer100gSlideActive,\r\n                slide1:per100gSlide,\r\n                slide2:perPieceSlide \r\n            } = foodItem\r\n            \r\n            delete foodItem.slide1\r\n            delete foodItem.slide2\r\n            delete foodItem.activeSlideIdx\r\n\r\n            isPer100gSlideActive = isPer100gSlideActive === 1\r\n            \r\n            return {\r\n                ...foodItem,\r\n                isPer100gSlideActive: isPer100gSlideActive,\r\n                per100gSlide: per100gSlide,\r\n                perPieceSlide: perPieceSlide\r\n            }\r\n        })\r\n        return newFoodItems\r\n    }\r\n\r\n    function correctLastSavedData(){\r\n        const newLastSavedData = {foodItems: correctFoodItems(lastSavedData.foodItems)}\r\n        return newLastSavedData\r\n    }\r\n\r\n\r\n    function refreshPage(){\r\n        window.location.reload();\r\n    }\r\n\r\n    function handleSlideChange(id, isPer100gSlideActive){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id == foodItem.id){\r\n                return {...foodItem, isPer100gSlideActive:  isPer100gSlideActive}\r\n            }\r\n            \r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)   \r\n    }\r\n\r\n    function capitalize(string){\r\n        if(typeof string !== 'string') return ''\r\n        const capitalizedString = `${string[0].toUpperCase()}${string.slice(1)}`\r\n        return capitalizedString\r\n    }\r\n\r\n    function addNewFoodNameSuggestions(toAddFoodNameSuggestions){\r\n        let newFoodNameSuggestions = toAddFoodNameSuggestions\r\n\r\n        if(!Array.isArray(toAddFoodNameSuggestions)) newFoodNameSuggestions = [toAddFoodNameSuggestions]\r\n\r\n        newFoodNameSuggestions = newFoodNameSuggestions.filter(NewFoodNameSuggestion => {\r\n            const isAlreadyExisting = foodNameSuggestions.some(foodNameSuggestion => \r\n                NewFoodNameSuggestion === foodNameSuggestion)\r\n            return !isAlreadyExisting\r\n        })\r\n        if(newFoodNameSuggestions.length === 0) return\r\n\r\n        newFoodNameSuggestions = [...foodNameSuggestions, ...newFoodNameSuggestions]\r\n        setFoodNameSuggestions(newFoodNameSuggestions)\r\n    }\r\n\r\n    function deleteFoodNameSuggestion(toDeleteFoodNameSuggestion){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodNameSuggestions.length; idx++){\r\n            if(toDeleteFoodNameSuggestion === foodNameSuggestions[idx]){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n        if(removeIdx == null) return\r\n\r\n        const newFoodNameSuggestions = [...foodNameSuggestions]\r\n        newFoodNameSuggestions.splice(removeIdx, 1)\r\n        setFoodNameSuggestions(newFoodNameSuggestions)\r\n    }\r\n\r\n    function clearData(){\r\n        setFoodItems([])\r\n        setTotalIE(0)\r\n    }\r\n   \r\n    function saveData(){\r\n        const newData = {\r\n            foodItems: foodItems\r\n        }\r\n        setLastSavedData(newData)\r\n    }\r\n\r\n    function loadData(){\r\n        if(lastSavedData == null) return\r\n        const {foodItems} = lastSavedData\r\n\r\n        setFoodItems(foodItems)\r\n\r\n        setTimeout(() => {\r\n            calculateIE(false, false)\r\n        }, 100)\r\n    }\r\n\r\n    function handleSuggestionClick(suggestionText, id){\r\n        const event = {target:{name:'name', value:suggestionText, id:id}}\r\n        handlePer100gSlideValueChange(event)\r\n    }\r\n\r\n    function getCurrentDayTime(){\r\n         const [hours, minutes] = new Date().toLocaleTimeString().split(':')\r\n        const time =  toNumberFormat(hours) + (toNumberFormat(minutes) / 60)\r\n        let dayTime = ''\r\n        \r\n        if(time <= 11.5){\r\n            dayTime = 'morning'\r\n        } else if(time <= 16){\r\n            dayTime = 'midday'\r\n        } else {\r\n            dayTime = 'evening'\r\n        }\r\n\r\n        return dayTime\r\n    }\r\n\r\n    function addNewFoodItem(){\r\n        const id = Math.random()\r\n        const newFoodItems = [...foodItems, {\r\n            key: Math.random(),\r\n            id: id,\r\n            isPer100gSlideActive: true,\r\n            per100gSlide: {\r\n                name: '',\r\n                grams: '',\r\n                carbohydratesPer100Grams: '',\r\n                isIntermeal: false,\r\n                shouldDisplaySuggestions: true\r\n            },\r\n            perPieceSlide: {\r\n                name: '',\r\n                numberOfPieces: '',\r\n                carbohydratesPerPiece: '',\r\n                isIntermeal: false,\r\n                shouldDisplaySuggestions: true\r\n            }\r\n        }]\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function deleteFoodItem(id){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodItems.length; idx++){\r\n            if(id == foodItems[idx].id){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n\r\n        const newFoodItems = [...foodItems]\r\n        newFoodItems.splice(removeIdx, 1)\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handlePer100gSlideValueChange(event){\r\n        const {name, value, id} = event.target\r\n\r\n        if(value[value.length - 1] === '-') return\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            // would not work with !==\r\n            if(id != foodItem.id) return foodItem\r\n        \r\n            // getting the carbohydratesPer100Grams with the name from localStorage\r\n            // if they exist set the carbohydratesPer100Grams input value\r\n            if(name === 'name'){\r\n                const prefixedKey = `${PREFIX}foodItem-${value.toLowerCase()}-carbohydratesPer100Grams`\r\n                const jsonValue = localStorage.getItem(prefixedKey)\r\n                if(jsonValue != null){\r\n                    const carbohydratesPer100Grams = JSON.parse(jsonValue)\r\n\r\n                    const per100gSlide = {...foodItem.per100gSlide, [name]:value, shouldDisplaySuggestions: false,\r\n                        carbohydratesPer100Grams: carbohydratesPer100Grams}\r\n\r\n                    return {...foodItem, per100gSlide:per100gSlide}\r\n                }\r\n            }\r\n            \r\n            // storing the carbohydratesPer100Grams with name as a key in localStorage\r\n            // storing a new foodNameSuggestion in localStorage\r\n            const isNameValid = foodItem.per100gSlide.name !== '' && foodItem.per100gSlide.name != null \r\n                                && foodItem.per100gSlide.name[0] !== '.'\r\n            if(name === 'carbohydratesPer100Grams' && isNameValid){\r\n                const prefixedKey = `${PREFIX}foodItem-${foodItem.per100gSlide.name.toLowerCase()}-carbohydratesPer100Grams`\r\n                const newFoodNameSuggestion = capitalize(foodItem.per100gSlide.name.toLowerCase())\r\n                if(value !== '') {\r\n                    // store foodItems carbohydratesPer100Grams\r\n                    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n                    // foodNameSuggestion\r\n                    addNewFoodNameSuggestions(newFoodNameSuggestion)\r\n                } else {\r\n                    localStorage.removeItem(prefixedKey)\r\n                    // foodNameSuggestion\r\n                    deleteFoodNameSuggestion(newFoodNameSuggestion)\r\n                }\r\n            }\r\n            const hasNameChanged = name === 'name'\r\n            const per100gSlide = {...foodItem.per100gSlide, [name]:value, shouldDisplaySuggestions: hasNameChanged}\r\n            return {...foodItem, per100gSlide:per100gSlide}\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handlePerPieceSlideValueChange(event){\r\n        const {name, value, id} = event.target\r\n\r\n        if(value[value.length - 1] === '-') return\r\n\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            // would not work with !==\r\n            if(id != foodItem.id) return foodItem\r\n        \r\n            // getting the carbohydratesPerPiece with the name from localStorage\r\n            // if they exist set the carbohydratesPerPiece input value\r\n            if(name === 'name'){\r\n                const prefixedKey = `${PREFIX}foodItem-${value.toLowerCase()}-carbohydratesPerPiece`\r\n                const jsonValue = localStorage.getItem(prefixedKey)\r\n                if(jsonValue != null){\r\n                    const carbohydratesPerPiece = JSON.parse(jsonValue)\r\n\r\n                    const perPieceSlide = {...foodItem.perPieceSlide, [name]:value, shouldDisplaySuggestions: false,\r\n                        carbohydratesPerPiece: carbohydratesPerPiece}\r\n\r\n                    return {...foodItem, perPieceSlide:perPieceSlide}\r\n                }\r\n            }\r\n            \r\n            // storing the carbohydratesPerPiece with name as a key in localStorage\r\n            // storing a new foodNameSuggestion in localStorage\r\n            const isNameValid = foodItem.perPieceSlide.name !== '' && foodItem.perPieceSlide.name != null \r\n                                && foodItem.perPieceSlide.name[0] !== '.'\r\n            if(name === 'carbohydratesPerPiece' && isNameValid){\r\n                const prefixedKey = `${PREFIX}foodItem-${foodItem.perPieceSlide.name.toLowerCase()}-carbohydratesPerPiece`\r\n                const newFoodNameSuggestion = capitalize(foodItem.perPieceSlide.name.toLowerCase())\r\n                if(value !== '') {\r\n                    // store foodItems carbohydratesPerPiece\r\n                    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n                    // foodNameSuggestion\r\n                        //addNewFoodNameSuggestions(newFoodNameSuggestion)\r\n                } else {\r\n                    localStorage.removeItem(prefixedKey)\r\n                    // foodNameSuggestion\r\n                        //deleteFoodNameSuggestion(newFoodNameSuggestion)\r\n                }\r\n            }\r\n            const hasNameChanged = name === 'name'\r\n            const perPieceSlide = {...foodItem.perPieceSlide, [name]:value, shouldDisplaySuggestions: hasNameChanged}\r\n            return {...foodItem, perPieceSlide:perPieceSlide}\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handleIsIntermealChange(id, activeSlideIdx){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id == foodItem.id){\r\n                if(activeSlideIdx === 1){\r\n                    const per100gSlide = {...foodItem.per100gSlide, isIntermeal: !foodItem.per100gSlide.isIntermeal}\r\n                    return {...foodItem, per100gSlide:per100gSlide}\r\n                } else {\r\n                    const perPieceSlide = {...foodItem.perPieceSlide, isIntermeal: !foodItem.perPieceSlide.isIntermeal}\r\n                    return {...foodItem, perPieceSlide:perPieceSlide}\r\n                }\r\n            }\r\n                \r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function toNumberFormat(string){\r\n        if(typeof string !== 'string') return -1\r\n\r\n        let stringCopy = string.slice()\r\n        stringCopy = stringCopy.replace(',', '.')\r\n        const number = parseFloat(stringCopy)\r\n        return Number.isNaN(number) ? -1 : number\r\n    }\r\n\r\n    function calculateIE(shouldScroll = true, shouldDisplayError = true){\r\n        const ERROR_MESSAGE = 'ein oder mehrere Werte sind nicht gültig'\r\n\r\n        function areItemsTypeofNumber(...items){\r\n            /* for(const item of items)\r\n                if(toNumberFormat(item) === -1) return false\r\n            return true */\r\n            return items.every(item => toNumberFormat(item) !== -1)\r\n        }\r\n\r\n        function calculateKE(foodItem){\r\n            if(foodItem.isPer100gSlideActive){\r\n                const grams = foodItem.per100gSlide.grams\r\n                const carbohydratesPer100Grams = foodItem.per100gSlide.carbohydratesPer100Grams\r\n\r\n                if(!areItemsTypeofNumber(grams, carbohydratesPer100Grams)) {\r\n                    if(shouldDisplayError)\r\n                        alert(ERROR_MESSAGE)\r\n                    return 0\r\n                }\r\n\r\n                return (toNumberFormat(grams) * (toNumberFormat(carbohydratesPer100Grams) / 100)) / 10\r\n            } else {\r\n                const numberOfPieces = foodItem.perPieceSlide.numberOfPieces\r\n                const carbohydratesPerPiece = foodItem.perPieceSlide.carbohydratesPerPiece\r\n                \r\n                if(!areItemsTypeofNumber(numberOfPieces, carbohydratesPerPiece)) {\r\n                    if(shouldDisplayError)\r\n                        alert(ERROR_MESSAGE)\r\n                    return 0\r\n                }\r\n\r\n                return toNumberFormat(numberOfPieces) * toNumberFormat(carbohydratesPerPiece) / 10\r\n            }\r\n        }\r\n\r\n        function calculateCorrectionInsulin(bloodSugar, targetBloodSugar, correctionFactor){\r\n            if(!areItemsTypeofNumber(bloodSugar, targetBloodSugar, correctionFactor)){\r\n                if(bloodSugar !== '' && shouldDisplayError)\r\n                    alert(ERROR_MESSAGE)\r\n                return 0\r\n            }\r\n            const correctionInsulin = (toNumberFormat(bloodSugar) - toNumberFormat(targetBloodSugar)) /\r\n                toNumberFormat(correctionFactor)\r\n            return correctionInsulin\r\n        }\r\n\r\n        // correction insulin\r\n        const correctionInsulin = calculateCorrectionInsulin(bloodSugar, targetBloodSugar, correctionFactor)\r\n        setTotalCorrectionInsulin(Math.round(correctionInsulin * 10) / 10)\r\n\r\n        // total KE | totalIntermealKE\r\n        let KE = 0, intermealKE = 0\r\n        for(const foodItem of foodItems){\r\n            const foodItemKE = calculateKE(foodItem)\r\n            KE += foodItemKE\r\n            if(foodItem.isPer100gSlideActive)\r\n                intermealKE += foodItem.per100gSlide.isIntermeal ? foodItemKE : 0\r\n            else\r\n                intermealKE += foodItem.perPieceSlide.isIntermeal ? foodItemKE : 0\r\n        }\r\n        setTotalKE(Math.round(KE * 10) / 10)\r\n        setTotalIntermealKE(Math.round(intermealKE * 10) / 10)\r\n        setTotalMainMealKE(Math.round((KE - intermealKE) * 10) / 10)\r\n        \r\n        // total IE\r\n        if(!areItemsTypeofNumber(carbohydrateFactor)) {\r\n            if(shouldDisplayError)\r\n                alert(ERROR_MESSAGE)\r\n            return -1\r\n        }\r\n\r\n        let IE = KE * toNumberFormat(carbohydrateFactor)\r\n        IE += correctionInsulin\r\n        IE = Math.round(IE * 10) / 10\r\n\r\n        setTotalIE(IE)\r\n\r\n        // needed because of async state setting\r\n        if(shouldScroll)\r\n            setTimeout(() => {\r\n                outputRef.current.scrollIntoView({smooth:true})\r\n            }, 5)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            {hasRerenderedSince60sec = true}\r\n            \r\n            <h1>Insulin Rechner</h1>\r\n            <p>\r\n                <button\r\n                    className='clear-data-button space-around'\r\n                    onClick = {clearData}\r\n                    >Daten löschen</button>\r\n\r\n                <button\r\n                    className='load-data-button'\r\n                    onClick = {loadData}\r\n                >Daten laden</button>\r\n            </p>\r\n\r\n            <hr className='destop-hr new-section-hr'/>\r\n\r\n            <FixedInformationSection \r\n                setBloodSugar={setBloodSugar}\r\n                setTargetBloodSugar={setTargetBloodSugar}\r\n                setCorrectionFactor={setCorrectionFactor}\r\n                setCarbohydrateFactor={setCarbohydrateFactor}\r\n                bloodSugar={bloodSugar}\r\n                targetBloodSugar={targetBloodSugar}\r\n                correctionFactor={correctionFactor}\r\n                carbohydrateFactor={carbohydrateFactor}\r\n            />\r\n\r\n            <hr className='destop-hr new-section-hr'/>\r\n\r\n            <ListSection \r\n                foodItems={foodItems}\r\n                foodNameSuggestions={foodNameSuggestions}\r\n                addNewFoodItem={addNewFoodItem}\r\n                handleIsIntermealChange={handleIsIntermealChange}\r\n                handlePer100gSlideValueChange={handlePer100gSlideValueChange}\r\n                handlePerPieceSlideValueChange={handlePerPieceSlideValueChange}\r\n                deleteFoodItem={deleteFoodItem}\r\n                handleSuggestionClick={handleSuggestionClick}\r\n                handleSlideChange={handleSlideChange}\r\n            />\r\n\r\n            <p style={{marginBottom:'20px'}}>\r\n                <button\r\n                    className='save-data-button space-around'\r\n                    onClick = {saveData}\r\n                >Daten speichen</button>\r\n\r\n                <button \r\n                    className='calculateIE-button'\r\n                    onClick={calculateIE}\r\n                >Berechne IE</button>\r\n            </p>\r\n\r\n            <Output \r\n                totalIE={totalIE}\r\n                totalMainMealKE={totalMainMealKE}\r\n                totalIntermealKE={totalIntermealKE}\r\n                totalKE={totalKE}\r\n                totalCorrectionInsulin={totalCorrectionInsulin}\r\n                outputRef={outputRef}\r\n            />\r\n        </div>  \r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from \"react-dom\"\r\n\r\nimport App from './App.js'\r\n\r\nReactDOM.render(\r\n    <App />, \r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}