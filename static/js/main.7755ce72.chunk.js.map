{"version":3,"sources":["Components/Input.js","Components/FixedInformationSection.js","Components/Suggestion.js","Components/SuggestionList.js","Components/FoodItem.js","Components/ListSection.js","Components/Output.js","hooks/useLocalStorage.js","App.js","index.js"],"names":["Input","id","type","name","value","onChange","onFocus","description","placeholder","unit","autoComplete","event","FixedInformationSection","setBloodSugar","setDayTimeChoice","setTargetBloodSugar","setCorrectionFactor","setCarbohydrateFactor","bloodSugar","dayTimeChoice","targetBloodSugar","correctionFactor","carbohydrateFactor","refreshPage","className","toString","target","onClick","Suggestion","suggestionText","handleSuggestionClick","SuggestionList","allSuggestions","searchingText","hideSuggestionList","matchingSuggestions","filter","slice","length","toLowerCase","map","key","Math","random","FoodItem","isPer100gSlideActive","per100gSlide","perPieceSlide","foodNameSuggestionsForPer100gSlide","foodNameSuggestionsForPerPieceSlide","handleIsIntermealChange","handlePer100gSlideValueChange","handlePerPieceSlideValueChange","deleteFoodItem","handleSlideChange","scrollFoodItemUp","per100gSlideHtml","checked","isIntermeal","setTimeout","shouldDisplaySuggestions","grams","carbohydratesPer100Grams","KE","perPieceSlideHtml","numberOfPieces","carbohydratesPerPiece","ListSection","foodItems","addNewFoodItem","element","Output","totalIE","totalMainMealKE","totalIntermealKE","totalKE","totalCorrectionInsulin","outputRef","ref","style","fontWeight","useLocalStorage","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","PREFIX","lastDayTime","App","lastSavedData","setLastSavedData","setFoodNameSuggestionsForPer100gSlide","setFoodNameSuggestionsForPerPieceSlide","getDayTime","setFoodItems","setTotalIE","setTotalKE","setTotalCorrectionInsulin","setTotalIntermealKE","setTotalMainMealKE","useRef","getCurrentDayTime","window","location","reload","foodItemId","inputPosY","document","getElementById","getBoundingClientRect","y","targetPosY","innerHeight","scroll","scrollMore","capitalize","string","toUpperCase","Date","toLocaleTimeString","split","hours","minutes","time","toNumberFormat","newFoodItems","foodItem","isNameValid","newFoodNameSuggestion","toAddFoodNameSuggestions","newFoodNameSuggestions","Array","isArray","NewFoodNameSuggestion","some","foodNameSuggestion","addNewFoodNameSuggestionsToPer100gSlide","removeItem","toDeleteFoodNameSuggestion","removeIdx","idx","splice","deleteFoodNameSuggestionFromPer100gSlide","hasNameChanged","addNewFoodNameSuggestionsToPerPieceSlide","deleteFoodNameSuggestionFromPerPieceSlide","stringCopy","replace","number","parseFloat","Number","isNaN","setInterval","activeSlideIdx","focus","marginBottom","shouldScroll","shouldDisplayError","ERROR_MESSAGE","areItemsTypeofNumber","items","every","item","calculateKE","alert","calculateCorrectionInsulin","correctionInsulin","round","intermealKE","foodItemKEList","foodItemKE","push","index","IE","scrollToBottom","ReactDOM","render"],"mappings":"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","file":"static/js/main.7755ce72.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Input(\r\n    {id, type='text', name='',value='', onChange='', onFocus='', description='', placeholder='', unit=''}) {\r\n    return (\r\n        <div>\r\n            <label> \r\n                {description}\r\n            </label>\r\n            <br />\r\n            <input\r\n                type={type}\r\n                autoComplete='off'\r\n                id={id}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange === '' ? () => 0 : (event) => onChange(event)}\r\n                onFocus={onFocus === '' ? () => 0: () => onFocus()}\r\n            ></input>\r\n            <label>\r\n                {unit}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\n\r\nexport default function FixedInformationSection(\r\n    {setBloodSugar, \r\n    setDayTimeChoice,\r\n    setTargetBloodSugar, \r\n    setCorrectionFactor,\r\n    setCarbohydrateFactor,\r\n    bloodSugar, \r\n    dayTimeChoice,\r\n    targetBloodSugar, \r\n    correctionFactor, \r\n    carbohydrateFactor,\r\n\r\n    refreshPage\r\n    }) {\r\n    \r\n    return (\r\n        <div className='space-around'>\r\n            <Input \r\n                name = 'BloodSugar'\r\n                type='number'\r\n                value = {bloodSugar.toString()}\r\n                description = 'Blutzucker'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setBloodSugar(event.target.value)}\r\n            />\r\n\r\n            <p className='center-elements day-time-choice-buttons'>\r\n                <button\r\n                    className={`automatic-day-time-choice-button \r\n                    ${dayTimeChoice === 'automatic' && 'active-button'}`}\r\n                    onClick={() => {\r\n                            setDayTimeChoice('automatic')\r\n                            refreshPage()\r\n                        }\r\n                }\r\n                >Automatic</button>\r\n\r\n                <button\r\n                    className={`morning-day-time-choice-button \r\n                    ${dayTimeChoice === 'morning' && 'active-button'}`}\r\n                    onClick={() => {\r\n                            setDayTimeChoice('morning')\r\n                            refreshPage()\r\n                        }\r\n                }\r\n                >Morgens</button>\r\n\r\n                <button\r\n                    className={`midday-day-time-choice-button \r\n                    ${dayTimeChoice === 'midday' && 'active-button'}`}\r\n                    onClick={() => {\r\n                            setDayTimeChoice('midday')\r\n                            refreshPage()\r\n                        }\r\n                }\r\n                >Mittags</button>\r\n\r\n                <button\r\n                    className={`evening-day-time-choice-button \r\n                    ${dayTimeChoice === 'evening' && 'active-button'}`}\r\n                    onClick={() => {\r\n                            setDayTimeChoice('evening')\r\n                            refreshPage()\r\n                        }\r\n                }\r\n                >Abends</button>\r\n            </p>\r\n\r\n            <Input \r\n                name = 'TargetBloodSugar'\r\n                type='number'\r\n                value = {targetBloodSugar}\r\n                description = 'Blutzucker Zielwert'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setTargetBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CorrectionFactor'\r\n                type='number'\r\n                value = {correctionFactor}\r\n                description = 'Korrektur-Faktor'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setCorrectionFactor(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CarbohydrateFactor'\r\n                type='number'\r\n                value = {carbohydrateFactor}\r\n                description = 'KE-Faktor'\r\n                onChange = {(event) => setCarbohydrateFactor(event.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Suggestion({suggestionText, handleSuggestionClick}) {\r\n    return (\r\n        <li\r\n            onClick={() => handleSuggestionClick(suggestionText)}\r\n        >\r\n            {suggestionText}\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport Suggestion from './Suggestion.js'\r\n\r\nexport default function SuggestionList(\r\n    {allSuggestions, searchingText, handleSuggestionClick, hideSuggestionList}) {\r\n    \r\n    const matchingSuggestions = searchingText === '' ? [] : allSuggestions.filter(suggestionText => {\r\n        const potentialMatch = suggestionText.slice(0, searchingText.length)\r\n        return potentialMatch.toLowerCase() === searchingText.toLowerCase()\r\n    })\r\n    \r\n    return (\r\n        <div>\r\n            {matchingSuggestions.length !== 0 && <ul className='suggestion-list'>\r\n            \r\n                <button\r\n                    className='hide-suggestion-list-button'\r\n                    onClick={() => hideSuggestionList()}\r\n                ></button>\r\n\r\n                {matchingSuggestions.map(suggestionText => <Suggestion \r\n                    key={Math.random()} \r\n                    suggestionText={suggestionText} \r\n                    handleSuggestionClick={handleSuggestionClick}\r\n                />)}\r\n            </ul>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\nimport SuggestionList from './SuggestionList.js'\r\n\r\nexport default function FoodItem(\r\n    {id,\r\n    isPer100gSlideActive=true,\r\n    per100gSlide={},\r\n    perPieceSlide={},\r\n\r\n    foodNameSuggestionsForPer100gSlide,\r\n    foodNameSuggestionsForPerPieceSlide,\r\n    handleIsIntermealChange, \r\n    handlePer100gSlideValueChange,\r\n    handlePerPieceSlideValueChange,\r\n    deleteFoodItem,\r\n    handleSuggestionClick,\r\n    handleSlideChange,\r\n    hideSuggestionList,\r\n    scrollFoodItemUp\r\n    }) {\r\n\r\n    const per100gSlideHtml = \r\n    <>\r\n        <label className='intermeal-checkbox'>\r\n                <input\r\n                    type = 'checkbox'\r\n                    checked = {per100gSlide.isIntermeal}\r\n                    onChange = {() => handleIsIntermealChange(id, 1)}\r\n                ></input> ZM?\r\n        </label>\r\n\r\n        <Input \r\n            id = {`${id}-per100gSlideName`}\r\n            name = 'name'\r\n            description = 'Name'\r\n            value = {per100gSlide.name}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n            onFocus = {() => setTimeout(() => {\r\n                scrollFoodItemUp(id, true)\r\n            }, 200) }\r\n        />\r\n        {per100gSlide.shouldDisplaySuggestions && <SuggestionList \r\n            allSuggestions={foodNameSuggestionsForPer100gSlide}\r\n            searchingText={per100gSlide.name}\r\n            handleSuggestionClick={(suggestionText) => handleSuggestionClick(suggestionText, id, true)}\r\n            hideSuggestionList={() => hideSuggestionList(id, true)}\r\n        />}\r\n\r\n        <Input\r\n            id = {`${id}-grams`}\r\n            name = 'grams'\r\n            type='number'\r\n            description = 'Gramm'\r\n            value = {per100gSlide.grams}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n        />\r\n        <Input\r\n            id = {`${id}-carbohydratesPer100Grams`}\r\n            name = 'carbohydratesPer100Grams'\r\n            type='number'\r\n            description = 'Kohlenhydrate pro 100g'\r\n            value = {per100gSlide.carbohydratesPer100Grams}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n        />\r\n        \r\n        {typeof per100gSlide.KE === 'number' && \r\n            <label\r\n                className='food-item-ke-label'\r\n            >{`${per100gSlide.KE} KE`}</label>}\r\n    </>\r\n\r\n    const perPieceSlideHtml = \r\n    <>\r\n         <label className='intermeal-checkbox'>\r\n                <input\r\n                    type = 'checkbox'\r\n                    checked = {perPieceSlide.isIntermeal}\r\n                    onChange = {() => handleIsIntermealChange(id, 2)}\r\n                ></input> ZM?\r\n        </label>\r\n\r\n        <Input \r\n            id = {`${id}-perPieceSlideName`}\r\n            name = 'name'\r\n            description = 'Name'\r\n            value = {perPieceSlide.name}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n            onFocus = {() => scrollFoodItemUp(id, false, true)}\r\n        />\r\n        {perPieceSlide.shouldDisplaySuggestions && <SuggestionList \r\n            allSuggestions={foodNameSuggestionsForPerPieceSlide}\r\n            searchingText={perPieceSlide.name}\r\n            handleSuggestionClick={(suggestionText) => handleSuggestionClick(suggestionText, id, false)}\r\n            hideSuggestionList={() => hideSuggestionList(id, false)}\r\n        />}\r\n\r\n        <Input \r\n            id = {`${id}-numberOfPieces`}\r\n            name = 'numberOfPieces'\r\n            type='number'\r\n            description = 'Anzahl'\r\n            value = {perPieceSlide.numberOfPieces}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n        />\r\n\r\n        <Input \r\n            id = {`${id}-carbohydratesPerPiece`}\r\n            name = 'carbohydratesPerPiece'\r\n            type='number'\r\n            description = 'Kohlenhydrate pro Stück'\r\n            value = {perPieceSlide.carbohydratesPerPiece}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n        />\r\n\r\n        {typeof perPieceSlide.KE === 'number' && \r\n            <label\r\n                className='food-item-ke-label'\r\n            >{`${perPieceSlide.KE} KE`}</label>}\r\n    </>\r\n\r\n    return (\r\n        <div>\r\n            <p className='center-elements'>\r\n                <button\r\n                    className={`per-100g-button ${isPer100gSlideActive && 'active-button'}`}\r\n                    onClick={() => handleSlideChange(id, true)}\r\n                >pro 100g</button>\r\n                \r\n                <button\r\n                    className={`per-piece-button ${!isPer100gSlideActive && 'active-button'}`}\r\n                    onClick={() => handleSlideChange(id, false)}\r\n                >pro Stück</button>\r\n            </p>\r\n\r\n            <div className='space-around'>\r\n                <button\r\n                    className = 'delete-food-item-button'\r\n                    onClick={() => deleteFoodItem(id)}\r\n                ></button>\r\n\r\n                {isPer100gSlideActive ? per100gSlideHtml : perPieceSlideHtml}\r\n            </div>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport FoodItem from './FoodItem'\r\n\r\nexport default function ListSection(\r\n    {foodItems=[], \r\n    foodNameSuggestionsForPer100gSlide=[],\r\n    foodNameSuggestionsForPerPieceSlide=[],\r\n    addNewFoodItem, \r\n    handleIsIntermealChange, \r\n    handlePer100gSlideValueChange, \r\n    handlePerPieceSlideValueChange, \r\n    deleteFoodItem,\r\n    handleSuggestionClick,\r\n    handleSlideChange,\r\n    hideSuggestionList,\r\n    scrollFoodItemUp\r\n    }) {\r\n    return (\r\n        <div>\r\n            <h3>Elemente</h3>\r\n            {foodItems.map(element => \r\n                <FoodItem \r\n                    key={element.key}\r\n                    id={element.id}\r\n                    isPer100gSlideActive={element.isPer100gSlideActive}\r\n                    per100gSlide={element.per100gSlide}\r\n                    perPieceSlide={element.perPieceSlide}\r\n                    \r\n                    foodNameSuggestionsForPer100gSlide={foodNameSuggestionsForPer100gSlide}\r\n                    foodNameSuggestionsForPerPieceSlide={foodNameSuggestionsForPerPieceSlide}\r\n                    handleIsIntermealChange={handleIsIntermealChange}\r\n                    handlePer100gSlideValueChange={handlePer100gSlideValueChange}\r\n                    handlePerPieceSlideValueChange={handlePerPieceSlideValueChange}\r\n                    deleteFoodItem={deleteFoodItem}\r\n                    handleSuggestionClick={handleSuggestionClick}\r\n                    handleSlideChange={handleSlideChange}\r\n                    hideSuggestionList={hideSuggestionList}\r\n                    scrollFoodItemUp={scrollFoodItemUp}\r\n             />)}\r\n             \r\n            <p>\r\n                <button \r\n                    className='add-new-food-item-button'\r\n                    onClick={() => addNewFoodItem()}\r\n                ></button>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Output(\r\n    {totalIE, totalMainMealKE, totalIntermealKE, totalKE, totalCorrectionInsulin, outputRef}) {\r\n    return (\r\n        <div ref={outputRef}>\r\n            {!(totalIE === '' || totalIE == null || totalIE <= 0) ? \r\n                <div>\r\n                    <hr />\r\n\r\n                    <div className='space-around'>\r\n                        \r\n                        <p className='output' >\r\n                            Hauptmahlzeit-KE : {totalMainMealKE} KE <br />\r\n                            Zwischenmahlzeit-KE : {totalIntermealKE} KE <br />\r\n                            Gesamt-KE: {totalKE} KE <br />\r\n                            <br />\r\n                            Korrektur-Insulin: {totalCorrectionInsulin} IE  <br />\r\n                            <span style={{fontWeight: 'bold'}}> Gesamt-Insulin: {totalIE} IE </span>\r\n                        </p>\r\n                            \r\n                    </div>\r\n                </div>\r\n            : ''}\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    // get value\r\n    const prefixedKey = PREFIX + key\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if(jsonValue != null) return JSON.parse(jsonValue)\r\n        if(typeof initialValue === \"function\"){\r\n            return initialValue()\r\n        } else{\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    // save value\r\n    useEffect(() =>{\r\n        if(value != null)\r\n            localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [/* prefixedKey, */ value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import React, {useState, useRef, useEffect} from 'react'\r\nimport { Link, animateScroll as scroll } from 'react-scroll'\r\n\r\nimport './css/style.css'\r\nimport FixedInformationSection from './Components/FixedInformationSection'\r\nimport ListSection from './Components/ListSection'\r\nimport Output from './Components/Output.js'\r\n\r\nimport useLocalStorage from './hooks/useLocalStorage.js'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\nlet lastDayTime = ''\r\n\r\nexport default function App() {\r\n    const [dayTimeChoice, setDayTimeChoice] = useLocalStorage('dayTimeChoice', 'automatic')\r\n    const [lastSavedData, setLastSavedData] = useLocalStorage('lastSavedData', {foodItems:[]})\r\n    const [foodNameSuggestionsForPer100gSlide, setFoodNameSuggestionsForPer100gSlide] = \r\n        useLocalStorage('foodNameSuggestions-per100gSlide', [])\r\n\r\n    const [foodNameSuggestionsForPerPieceSlide, setFoodNameSuggestionsForPerPieceSlide] = \r\n        useLocalStorage('foodNameSuggestions-perPieceSlide', [])\r\n\r\n    const [bloodSugar, setBloodSugar] = useState('')\r\n    const [targetBloodSugar, setTargetBloodSugar] = useLocalStorage(`${getDayTime()}-targetBloodSugar`)\r\n    const [correctionFactor, setCorrectionFactor] = useLocalStorage(`${getDayTime()}-correctionFactor`)\r\n    const [carbohydrateFactor, setCarbohydrateFactor] = useLocalStorage(`${getDayTime()}-carbohydrateFactor`)\r\n\r\n    const [foodItems, setFoodItems] = useLocalStorage('foodItems', [])\r\n\r\n    const [totalIE, setTotalIE] = useState('')\r\n    const [totalKE, setTotalKE] = useState('')\r\n    const [totalCorrectionInsulin, setTotalCorrectionInsulin] = useState('')\r\n    const [totalIntermealKE, setTotalIntermealKE] = useState('')\r\n    const [totalMainMealKE, setTotalMainMealKE] = useState('')\r\n\r\n\r\n    const outputRef = useRef()\r\n\r\n    useEffect(() => {\r\n        lastDayTime = getCurrentDayTime()\r\n\r\n        // update every minute\r\n        setInterval(() => {\r\n            if(lastDayTime !== getCurrentDayTime()){\r\n                refreshPage()\r\n            }\r\n        }, 60000);\r\n    }, [])\r\n\r\n    function getDayTime(){\r\n        if(dayTimeChoice === 'automatic')\r\n            return getCurrentDayTime()\r\n        else\r\n            return dayTimeChoice\r\n    }\r\n\r\n    function refreshPage(){\r\n        window.location.reload();\r\n    }\r\n\r\n    function scrollFoodItemUp(id, isPer100gSlideActive){\r\n        const foodItemId = isPer100gSlideActive ? `${id}-per100gSlideName` : `${id}-perPieceSlideName`  \r\n        const inputPosY = document.getElementById(foodItemId).getBoundingClientRect().y\r\n        const targetPosY = 0.45 * window.innerHeight\r\n        scroll.scrollMore(inputPosY - targetPosY)\r\n    }\r\n\r\n    function hideSuggestionList(id, isPer100gSlideActive){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id === foodItem.id){\r\n                const per100gSlide = {...foodItem.per100gSlide, shouldDisplaySuggestions: false}\r\n                const perPieceSlide = {...foodItem.perPieceSlide, shouldDisplaySuggestions: false}\r\n                \r\n                if(isPer100gSlideActive)\r\n                    return {...foodItem, per100gSlide:per100gSlide}\r\n                else\r\n                    return {...foodItem, perPieceSlide:perPieceSlide}\r\n            }\r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)   \r\n    }\r\n\r\n    function handleSlideChange(id, isPer100gSlideActive){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id === foodItem.id){\r\n                return {...foodItem, isPer100gSlideActive:  isPer100gSlideActive}\r\n            }\r\n            \r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)   \r\n    }\r\n\r\n    function capitalize(string){\r\n        if(typeof string !== 'string') return ''\r\n        const capitalizedString = `${string[0].toUpperCase()}${string.slice(1)}`\r\n        return capitalizedString\r\n    }\r\n\r\n    function addNewFoodNameSuggestionsToPer100gSlide(toAddFoodNameSuggestions){\r\n        let newFoodNameSuggestions = toAddFoodNameSuggestions\r\n        if(!Array.isArray(toAddFoodNameSuggestions)) newFoodNameSuggestions = [toAddFoodNameSuggestions]\r\n\r\n        newFoodNameSuggestions = newFoodNameSuggestions.filter(NewFoodNameSuggestion => {\r\n            const isAlreadyExisting = foodNameSuggestionsForPer100gSlide.some(foodNameSuggestion => \r\n                NewFoodNameSuggestion === foodNameSuggestion)\r\n            return !isAlreadyExisting\r\n        })\r\n        if(newFoodNameSuggestions.length === 0) return\r\n\r\n        newFoodNameSuggestions = [...foodNameSuggestionsForPer100gSlide, ...newFoodNameSuggestions]\r\n        setFoodNameSuggestionsForPer100gSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function deleteFoodNameSuggestionFromPer100gSlide(toDeleteFoodNameSuggestion){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodNameSuggestionsForPer100gSlide.length; idx++){\r\n            if(toDeleteFoodNameSuggestion === foodNameSuggestionsForPer100gSlide[idx]){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n        if(removeIdx == null) return\r\n\r\n        const newFoodNameSuggestions = [...foodNameSuggestionsForPer100gSlide]\r\n        newFoodNameSuggestions.splice(removeIdx, 1)\r\n        setFoodNameSuggestionsForPer100gSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function addNewFoodNameSuggestionsToPerPieceSlide(toAddFoodNameSuggestions){\r\n        let newFoodNameSuggestions = toAddFoodNameSuggestions\r\n        if(!Array.isArray(toAddFoodNameSuggestions)) newFoodNameSuggestions = [toAddFoodNameSuggestions]\r\n\r\n        newFoodNameSuggestions = newFoodNameSuggestions.filter(NewFoodNameSuggestion => {\r\n            const isAlreadyExisting = foodNameSuggestionsForPerPieceSlide.some(foodNameSuggestion => \r\n                NewFoodNameSuggestion === foodNameSuggestion)\r\n            return !isAlreadyExisting\r\n        })\r\n        if(newFoodNameSuggestions.length === 0) return\r\n\r\n        newFoodNameSuggestions = [...foodNameSuggestionsForPerPieceSlide, ...newFoodNameSuggestions]\r\n        setFoodNameSuggestionsForPerPieceSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function deleteFoodNameSuggestionFromPerPieceSlide(toDeleteFoodNameSuggestion){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodNameSuggestionsForPerPieceSlide.length; idx++){\r\n            if(toDeleteFoodNameSuggestion === foodNameSuggestionsForPerPieceSlide[idx]){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n        if(removeIdx == null) return\r\n\r\n        const newFoodNameSuggestions = [...foodNameSuggestionsForPerPieceSlide]\r\n        newFoodNameSuggestions.splice(removeIdx, 1)\r\n        setFoodNameSuggestionsForPerPieceSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function clearData(){\r\n        setFoodItems([])\r\n        setTotalIE(0)\r\n    }\r\n   \r\n    function saveData(){\r\n        const newData = {\r\n            foodItems: foodItems\r\n        }\r\n        setLastSavedData(newData)\r\n    }\r\n\r\n    function loadData(){\r\n        if(lastSavedData == null) return\r\n        const {foodItems} = lastSavedData\r\n\r\n        setFoodItems(foodItems)\r\n    }\r\n\r\n    function handleSuggestionClick(suggestionText, id, isPer100gSlideActive){\r\n        if(isPer100gSlideActive)\r\n            document.getElementById(`${id}-grams`).focus()\r\n        else\r\n            document.getElementById(`${id}-numberOfPieces`).focus()\r\n\r\n        const event = {target:{name:'name', value:suggestionText, id:id}}\r\n        isPer100gSlideActive ? handlePer100gSlideValueChange(event) : handlePerPieceSlideValueChange(event)\r\n    }\r\n\r\n    function getCurrentDayTime(){\r\n         const [hours, minutes] = new Date().toLocaleTimeString().split(':')\r\n        const time =  toNumberFormat(hours) + (toNumberFormat(minutes) / 60)\r\n        let dayTime = ''\r\n        \r\n        if(time <= 11.5){\r\n            dayTime = 'morning'\r\n        } else if(time <= 16){\r\n            dayTime = 'midday'\r\n        } else {\r\n            dayTime = 'evening'\r\n        }\r\n\r\n        return dayTime\r\n    }\r\n\r\n    function addNewFoodItem(){\r\n        const id = Math.random()\r\n        const newFoodItems = [...foodItems, {\r\n            key: Math.random(),\r\n            id: id,\r\n            isPer100gSlideActive: true,\r\n            per100gSlide: {\r\n                name: '',\r\n                grams: '',\r\n                carbohydratesPer100Grams: '',\r\n                KE: '',\r\n                isIntermeal: false,\r\n                shouldDisplaySuggestions: true,\r\n            },\r\n            perPieceSlide: {\r\n                name: '',\r\n                numberOfPieces: '',\r\n                carbohydratesPerPiece: '',\r\n                KE: '',\r\n                isIntermeal: false,\r\n                shouldDisplaySuggestions: true,\r\n            }\r\n        }]\r\n        setFoodItems(newFoodItems)\r\n\r\n        setTimeout(() => {\r\n            scroll.scrollMore(255)\r\n        }, 100)\r\n    }\r\n\r\n    function deleteFoodItem(id){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodItems.length; idx++){\r\n            if(id === foodItems[idx].id){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n\r\n        const newFoodItems = [...foodItems]\r\n        newFoodItems.splice(removeIdx, 1)\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handlePer100gSlideValueChange(event){\r\n        const {name, value} = event.target\r\n\r\n        let {id} = event.target\r\n        if(typeof id === 'string'){\r\n            id = id.split('-')[0]\r\n            id = toNumberFormat(id)\r\n        }\r\n\r\n        if(value[value.length - 1] === '-') return\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id !== foodItem.id) return foodItem\r\n        \r\n            // getting the carbohydratesPer100Grams with the name from localStorage\r\n            // if they exist set the carbohydratesPer100Grams input value\r\n            if(name === 'name'){\r\n                scrollFoodItemUp(id, true)\r\n\r\n                const prefixedKey = `${PREFIX}foodItem-${value.toLowerCase()}-carbohydratesPer100Grams`\r\n                const jsonValue = localStorage.getItem(prefixedKey)\r\n                if(jsonValue != null){\r\n                    const carbohydratesPer100Grams = JSON.parse(jsonValue)\r\n\r\n                    const per100gSlide = {...foodItem.per100gSlide, [name]:value, shouldDisplaySuggestions: false,\r\n                        carbohydratesPer100Grams: carbohydratesPer100Grams}\r\n\r\n                    return {...foodItem, per100gSlide:per100gSlide}\r\n                }\r\n            }\r\n            \r\n            // storing the carbohydratesPer100Grams with name as a key in localStorage\r\n            // storing a new foodNameSuggestion in localStorage\r\n            const isNameValid = foodItem.per100gSlide.name !== '' && foodItem.per100gSlide.name != null \r\n                                && foodItem.per100gSlide.name[0] !== '.'\r\n            if(name === 'carbohydratesPer100Grams' && isNameValid){\r\n                const prefixedKey = `${PREFIX}foodItem-${foodItem.per100gSlide.name.toLowerCase()}-carbohydratesPer100Grams`\r\n                const newFoodNameSuggestion = capitalize(foodItem.per100gSlide.name.toLowerCase())\r\n                if(value !== '') {\r\n                    // store foodItems carbohydratesPer100Grams\r\n                    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n                    // foodNameSuggestion\r\n                    addNewFoodNameSuggestionsToPer100gSlide(newFoodNameSuggestion)\r\n                } else {\r\n                    localStorage.removeItem(prefixedKey)\r\n                    // foodNameSuggestion\r\n                    deleteFoodNameSuggestionFromPer100gSlide(newFoodNameSuggestion)\r\n                }\r\n            }\r\n            const hasNameChanged = name === 'name'\r\n            const per100gSlide = {...foodItem.per100gSlide, [name]:value, shouldDisplaySuggestions: hasNameChanged}\r\n            return {...foodItem, per100gSlide:per100gSlide}\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handlePerPieceSlideValueChange(event){\r\n        const {name, value} = event.target\r\n\r\n        let {id} = event.target\r\n        if(typeof id === 'string'){\r\n            id = id.split('-')[0]\r\n            id = toNumberFormat(id)\r\n        }\r\n\r\n        if(value[value.length - 1] === '-') return\r\n\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            // would not work with !==\r\n            if(id !== foodItem.id) return foodItem\r\n        \r\n            // getting the carbohydratesPerPiece with the name from localStorage\r\n            // if they exist set the carbohydratesPerPiece input value\r\n            if(name === 'name'){\r\n                scrollFoodItemUp(id, false)\r\n                \r\n                const prefixedKey = `${PREFIX}foodItem-${value.toLowerCase()}-carbohydratesPerPiece`\r\n                const jsonValue = localStorage.getItem(prefixedKey)\r\n                if(jsonValue != null){\r\n                    const carbohydratesPerPiece = JSON.parse(jsonValue)\r\n\r\n                    const perPieceSlide = {...foodItem.perPieceSlide, [name]:value, shouldDisplaySuggestions: false,\r\n                        carbohydratesPerPiece: carbohydratesPerPiece}\r\n\r\n                    return {...foodItem, perPieceSlide:perPieceSlide}\r\n                }\r\n            }\r\n            \r\n            // storing the carbohydratesPerPiece with name as a key in localStorage\r\n            // storing a new foodNameSuggestion in localStorage\r\n            const isNameValid = foodItem.perPieceSlide.name !== '' && foodItem.perPieceSlide.name != null \r\n                                && foodItem.perPieceSlide.name[0] !== '.'\r\n            if(name === 'carbohydratesPerPiece' && isNameValid){\r\n                const prefixedKey = `${PREFIX}foodItem-${foodItem.perPieceSlide.name.toLowerCase()}-carbohydratesPerPiece`\r\n                const newFoodNameSuggestion = capitalize(foodItem.perPieceSlide.name.toLowerCase())\r\n                if(value !== '') {\r\n                    // store foodItems carbohydratesPerPiece\r\n                    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n                    // foodNameSuggestion\r\n                    addNewFoodNameSuggestionsToPerPieceSlide(newFoodNameSuggestion)\r\n                } else {\r\n                    localStorage.removeItem(prefixedKey)\r\n                    // foodNameSuggestion\r\n                    deleteFoodNameSuggestionFromPerPieceSlide(newFoodNameSuggestion)\r\n                }\r\n            }\r\n            const hasNameChanged = name === 'name'\r\n            const perPieceSlide = {...foodItem.perPieceSlide, [name]:value, shouldDisplaySuggestions: hasNameChanged}\r\n            return {...foodItem, perPieceSlide:perPieceSlide}\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handleIsIntermealChange(id, activeSlideIdx){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id === foodItem.id){\r\n                if(activeSlideIdx === 1){\r\n                    const per100gSlide = {...foodItem.per100gSlide, isIntermeal: !foodItem.per100gSlide.isIntermeal}\r\n                    return {...foodItem, per100gSlide:per100gSlide}\r\n                } else {\r\n                    const perPieceSlide = {...foodItem.perPieceSlide, isIntermeal: !foodItem.perPieceSlide.isIntermeal}\r\n                    return {...foodItem, perPieceSlide:perPieceSlide}\r\n                }\r\n            }\r\n                \r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function toNumberFormat(string){\r\n        if(typeof string === 'number') return string\r\n        if(typeof string !== 'string') return -1\r\n\r\n        let stringCopy = string.slice()\r\n        stringCopy = stringCopy.replace(',', '.')\r\n        const number = parseFloat(stringCopy)\r\n        return Number.isNaN(number) ? -1 : number\r\n    }\r\n\r\n    function calculateIE(shouldScroll = true, shouldDisplayError = true){\r\n        const ERROR_MESSAGE = 'ein oder mehrere Werte sind nicht gültig'\r\n\r\n        function areItemsTypeofNumber(...items){\r\n            return items.every(item => toNumberFormat(item) !== -1)\r\n        }\r\n\r\n        function calculateKE(foodItem){\r\n            if(foodItem.isPer100gSlideActive){\r\n                const grams = foodItem.per100gSlide.grams\r\n                const carbohydratesPer100Grams = foodItem.per100gSlide.carbohydratesPer100Grams\r\n\r\n                if(!areItemsTypeofNumber(grams, carbohydratesPer100Grams)) {\r\n                    if(shouldDisplayError)\r\n                        alert(ERROR_MESSAGE)\r\n                    return 0\r\n                }\r\n\r\n                return (toNumberFormat(grams) * (toNumberFormat(carbohydratesPer100Grams) / 100)) / 10\r\n            } else {\r\n                const numberOfPieces = foodItem.perPieceSlide.numberOfPieces\r\n                const carbohydratesPerPiece = foodItem.perPieceSlide.carbohydratesPerPiece\r\n                \r\n                if(!areItemsTypeofNumber(numberOfPieces, carbohydratesPerPiece)) {\r\n                    if(shouldDisplayError)\r\n                        alert(ERROR_MESSAGE)\r\n                    return 0\r\n                }\r\n\r\n                return toNumberFormat(numberOfPieces) * toNumberFormat(carbohydratesPerPiece) / 10\r\n            }\r\n        }\r\n\r\n        function calculateCorrectionInsulin(bloodSugar, targetBloodSugar, correctionFactor){\r\n            if(!areItemsTypeofNumber(bloodSugar, targetBloodSugar, correctionFactor)){\r\n                if(bloodSugar !== '' && shouldDisplayError)\r\n                    alert(ERROR_MESSAGE)\r\n                return 0\r\n            }\r\n            const correctionInsulin = (toNumberFormat(bloodSugar) - toNumberFormat(targetBloodSugar)) /\r\n                toNumberFormat(correctionFactor)\r\n            return correctionInsulin\r\n        }\r\n\r\n        // correction insulin\r\n        const correctionInsulin = calculateCorrectionInsulin(bloodSugar, targetBloodSugar, correctionFactor)\r\n        setTotalCorrectionInsulin(Math.round(correctionInsulin * 10) / 10)\r\n\r\n        // total KE | totalIntermealKE\r\n        let KE = 0, intermealKE = 0\r\n        const foodItemKEList = []\r\n        for(const foodItem of foodItems){\r\n            const foodItemKE = calculateKE(foodItem)\r\n            KE += foodItemKE\r\n            foodItemKEList.push(foodItemKE)\r\n            if(foodItem.isPer100gSlideActive)\r\n                intermealKE += foodItem.per100gSlide.isIntermeal ? foodItemKE : 0\r\n            else\r\n                intermealKE += foodItem.perPieceSlide.isIntermeal ? foodItemKE : 0\r\n        }\r\n        setTotalKE(Math.round(KE * 10) / 10)\r\n        setTotalIntermealKE(Math.round(intermealKE * 10) / 10)\r\n        setTotalMainMealKE(Math.round((KE - intermealKE) * 10) / 10)\r\n        const newFoodItems = foodItems.map((foodItem, index) => {\r\n            const foodItemKE = Math.round(foodItemKEList[index] * 10) / 10\r\n\r\n            let newFoodItem\r\n            if(foodItem.isPer100gSlideActive)\r\n                newFoodItem = {...foodItem, per100gSlide: { \r\n                    ...foodItem.per100gSlide, KE: foodItemKE}}\r\n            else\r\n                newFoodItem = {...foodItem, perPieceSlide: { \r\n                    ...foodItem.perPieceSlide, KE: foodItemKE}}\r\n\r\n            return newFoodItem\r\n        })\r\n        setFoodItems(newFoodItems)\r\n        \r\n        // total IE\r\n        if(!areItemsTypeofNumber(carbohydrateFactor)) {\r\n            if(shouldDisplayError)\r\n                alert(ERROR_MESSAGE)\r\n            return -1\r\n        }\r\n\r\n        let IE = KE * toNumberFormat(carbohydrateFactor)\r\n        IE += correctionInsulin\r\n        IE = Math.round(IE * 10) / 10\r\n\r\n        setTotalIE(IE)\r\n\r\n        if(shouldScroll)\r\n            // needed because of async state setting\r\n            setTimeout(() => {\r\n                scroll.scrollToBottom()\r\n            }, 5)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Insulin Rechner</h1>\r\n            <p>\r\n                <button\r\n                    className='clear-data-button space-around'\r\n                    onClick = {clearData}\r\n                    >Daten löschen</button>\r\n\r\n                <button\r\n                    className='load-data-button'\r\n                    onClick = {loadData}\r\n                >Daten laden</button>\r\n            </p>\r\n\r\n            <hr className='destop-hr new-section-hr'/>\r\n\r\n            <FixedInformationSection \r\n                setBloodSugar={setBloodSugar}\r\n                setDayTimeChoice={setDayTimeChoice}\r\n                setTargetBloodSugar={setTargetBloodSugar}\r\n                setCorrectionFactor={setCorrectionFactor}\r\n                setCarbohydrateFactor={setCarbohydrateFactor}\r\n                bloodSugar={bloodSugar}\r\n                dayTimeChoice={dayTimeChoice}\r\n                targetBloodSugar={targetBloodSugar}\r\n                correctionFactor={correctionFactor}\r\n                carbohydrateFactor={carbohydrateFactor}\r\n\r\n                refreshPage={refreshPage}\r\n            />\r\n\r\n            <hr className='destop-hr new-section-hr'/>\r\n\r\n            <ListSection \r\n                foodItems={foodItems}\r\n                foodNameSuggestionsForPer100gSlide={foodNameSuggestionsForPer100gSlide}\r\n                foodNameSuggestionsForPerPieceSlide={foodNameSuggestionsForPerPieceSlide}\r\n                addNewFoodItem={addNewFoodItem}\r\n                handleIsIntermealChange={handleIsIntermealChange}\r\n                handlePer100gSlideValueChange={handlePer100gSlideValueChange}\r\n                handlePerPieceSlideValueChange={handlePerPieceSlideValueChange}\r\n                deleteFoodItem={deleteFoodItem}\r\n                handleSuggestionClick={handleSuggestionClick}\r\n                handleSlideChange={handleSlideChange}\r\n                hideSuggestionList={hideSuggestionList}\r\n                scrollFoodItemUp={scrollFoodItemUp}\r\n            />\r\n\r\n            <p style={{marginBottom:'20px'}}>\r\n                <button\r\n                    className='save-data-button space-around'\r\n                    onClick = {saveData}\r\n                >Daten speichen</button>\r\n\r\n                <button \r\n                    className='calculateIE-button'\r\n                    onClick={calculateIE}\r\n                >Berechne IE</button>\r\n            </p>\r\n\r\n            <Output \r\n                totalIE={totalIE}\r\n                totalMainMealKE={totalMainMealKE}\r\n                totalIntermealKE={totalIntermealKE}\r\n                totalKE={totalKE}\r\n                totalCorrectionInsulin={totalCorrectionInsulin}\r\n                outputRef={outputRef}\r\n            />\r\n        </div>  \r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from \"react-dom\"\r\n\r\nimport App from './App.js'\r\n\r\nReactDOM.render(\r\n    <App />, \r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}