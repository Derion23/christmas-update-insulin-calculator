{"version":3,"sources":["Components/Input.js","Components/FixedInformationSection.js","Components/FoodItem.js","Components/ListSection.js","Components/Output.js","hooks/useLocalStorage.js","App.js","index.js"],"names":["Input","id","name","value","onChange","description","placeholder","unit","event","FixedInformationSection","setBloodSugar","setTargetBloodSugar","setCorrectionFactor","setCarbohydrateFactor","bloodSugar","targetBloodSugar","correctionFactor","carbohydrateFactor","toString","target","FoodItem","grams","carbohydratesPer100Grams","isIntermeal","handleIsIntermealChange","handleChange","deleteFoodItem","className","onClick","type","checked","ListSection","foodItems","addNewFoodItem","map","element","key","Output","totalIE","totalMainMealKE","totalIntermealKE","totalKE","totalCorrectionInsulin","outputRef","ref","undefined","useLocalStorage","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","setFoodItems","setTotalIE","setTotalKE","setTotalCorrectionInsulin","setTotalIntermealKE","setTotalMainMealKE","useRef","newFoodItems","Math","random","foodItem","removeIdx","idx","length","splice","ERROR_MESSAGE","toNumberFormat","string","stringCopy","slice","replace","number","parseFloat","Number","isNaN","areItemsTypeofNumber","items","item","calculateKE","alert","correctionInsulin","calculateCorrectionInsuline","round","KE","intermealKE","IE","current","scrollIntoView","smooth","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ff657f0c.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Input({id, name='',value='', onChange='', description='', placeholder='', unit=''}) {\r\n    return (\r\n        <div>\r\n            <label>\r\n                {description}\r\n            </label>\r\n            <br />\r\n            <input\r\n                id={id}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange === '' ? () => 0 : (event) => onChange(event)}\r\n            ></input>\r\n            <label>\r\n                {unit}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\n\r\nexport default function FixedInformationSection(\r\n    {setBloodSugar, \r\n    setTargetBloodSugar, \r\n    setCorrectionFactor,\r\n    setCarbohydrateFactor,\r\n    bloodSugar, \r\n    targetBloodSugar, \r\n    correctionFactor, \r\n    carbohydrateFactor\r\n    }) {\r\n    \r\n    return (\r\n        <div>\r\n            <Input \r\n                name = 'BloodSugar'\r\n                value = {bloodSugar.toString()}\r\n                description = 'Blutzucker'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'TargetBloodSugar'\r\n                value = {targetBloodSugar}\r\n                description = 'Blutzucker Zielwert'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setTargetBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CorrectionFactor'\r\n                value = {correctionFactor}\r\n                description = 'Korrektur-Faktor'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setCorrectionFactor(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CarbohydrateFactor'\r\n                value = {carbohydrateFactor}\r\n                description = 'KE-Faktor'\r\n                onChange = {(event) => setCarbohydrateFactor(event.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\n\r\nexport default function FoodItem(\r\n    {id, \r\n    name='', \r\n    grams='', \r\n    carbohydratesPer100Grams='',\r\n    isIntermeal=false, \r\n    handleIsIntermealChange, \r\n    handleChange, \r\n    deleteFoodItem\r\n    }) {\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className = 'delete-food-item-button'\r\n                onClick={() => deleteFoodItem(id)}\r\n            >x</button>\r\n\r\n            <label className='intermeal-checkbox'>\r\n                <input\r\n                    type = 'checkbox'\r\n                    checked = {isIntermeal}\r\n                    onChange = {() => handleIsIntermealChange(id)}\r\n                ></input> ZM?\r\n            </label>\r\n            \r\n            \r\n            <Input \r\n                id = {id}\r\n                name = 'name'\r\n                description = 'Name'\r\n                value = {name}\r\n                onChange = {(event) => handleChange(event)}\r\n            />\r\n            <Input\r\n                id = {id}\r\n                name = 'grams'\r\n                description = 'Gramm'\r\n                value={grams}\r\n                onChange = {(event) => handleChange(event)}\r\n            />\r\n            <Input\r\n                id = {id}\r\n                name = 'carbohydratesPer100Grams'\r\n                description = 'Kohlenhydrate pro 100g'\r\n                value={carbohydratesPer100Grams}\r\n                onChange = {(event) => handleChange(event)}\r\n            />\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport FoodItem from './FoodItem'\r\n\r\nexport default function ListSection({foodItems=[], addNewFoodItem, handleIsIntermealChange, handleChange, deleteFoodItem}) {\r\n    return (\r\n        <div>\r\n            <h3>Elemente</h3>\r\n\r\n            {foodItems.map(element => \r\n                <FoodItem \r\n                    key={element.key}\r\n                    id={element.id}\r\n                    name={element.name}\r\n                    grams={element.grams}\r\n                    carbohydratesPer100Grams={element.carbohydratesPer100Grams}\r\n                    isIntermeal={element.isIntermeal}\r\n                    handleIsIntermealChange={handleIsIntermealChange}\r\n                    handleChange={handleChange}\r\n                    deleteFoodItem={deleteFoodItem}\r\n             />)}\r\n             \r\n            <p>\r\n                <button \r\n                    className='add-new-food-item-button'\r\n                    onClick={() => addNewFoodItem()}\r\n                ></button>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Output(\r\n    {totalIE, totalMainMealKE, totalIntermealKE, totalKE, totalCorrectionInsulin, outputRef}) {\r\n    return (\r\n        <div ref={outputRef}>\r\n            {!(totalIE === '' || totalIE == undefined || totalIE <= 0) ? \r\n\r\n                <p className='output' >\r\n                    Hauptmahlzeit-KE : {totalMainMealKE} KE <br />\r\n                    Zwischenmahlzeit-KE : {totalIntermealKE} KE <br />\r\n                    Gesamt-KE: {totalKE} KE <br />\r\n                    <br />\r\n                    Korrektur-Insulin: {totalCorrectionInsulin} IE  <br />\r\n                    Gesamt-Insulin: {totalIE} IE\r\n                </p>\r\n\r\n             : ''}\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    // get value\r\n    const prefixedKey = PREFIX + key\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if(jsonValue != null) return JSON.parse(jsonValue)\r\n        if(typeof initialValue === \"function\"){\r\n            return initialValue()\r\n        } else{\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    // save value\r\n    useEffect(() =>{\r\n        if(value != null)\r\n            localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [prefixedKey, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import React, {useState, useRef} from 'react'\r\n\r\nimport './css/style.css'\r\nimport FixedInformationSection from './Components/FixedInformationSection'\r\nimport ListSection from './Components/ListSection'\r\nimport Output from './Components/Output.js'\r\nimport useLocalStorage from './hooks/useLocalStorage.js'\r\nimport FoodItem from './Components/FoodItem'\r\n\r\nexport default function App() {\r\n    const [bloodSugar, setBloodSugar] = useState('')\r\n    const [targetBloodSugar, setTargetBloodSugar] = useLocalStorage('targetBloodSugar')\r\n    const [correctionFactor, setCorrectionFactor] = useLocalStorage('correctionFactor')\r\n    const [carbohydrateFactor, setCarbohydrateFactor] = useLocalStorage('carbohydrateFactor')\r\n\r\n    const [foodItems, setFoodItems] = useState([])\r\n\r\n    const [totalIE, setTotalIE] = useState('')\r\n    const [totalKE, setTotalKE] = useState('')\r\n    const [totalCorrectionInsulin, setTotalCorrectionInsulin] = useState('')\r\n    const [totalIntermealKE, setTotalIntermealKE] = useState('')\r\n    const [totalMainMealKE, setTotalMainMealKE] = useState('')\r\n\r\n    const outputRef = useRef()\r\n\r\n    function addNewFoodItem(){\r\n        const newFoodItems = [...foodItems, {\r\n            key:Math.random(),\r\n            id:Math.random(),\r\n            isIntermeal: false\r\n        }]\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function deleteFoodItem(id){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodItems.length; idx++){\r\n            if(id == foodItems[idx].id){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n\r\n        const newFoodItems = [...foodItems]\r\n        newFoodItems.splice(removeIdx, 1)\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handleChange(event){\r\n        const {name, value, id} = event.target\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id == foodItem.id){\r\n                return {...foodItem, [name]:value}\r\n            }\r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handleIsIntermealChange(id){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id == foodItem.id)\r\n                return {...foodItem, isIntermeal: !foodItem.isIntermeal}\r\n            \r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function calculateIE(){\r\n        const ERROR_MESSAGE = 'ein oder mehrere Werte sind nicht gültig'\r\n\r\n        function toNumberFormat(string){\r\n            let stringCopy = string.slice()\r\n            stringCopy = stringCopy.replace(',', '.')\r\n            const number = parseFloat(stringCopy)\r\n            return Number.isNaN(number) ? -1 : number\r\n        }\r\n\r\n        function areItemsTypeofNumber(...items){\r\n            for(const item of items)\r\n                if(toNumberFormat(item) === -1) return false\r\n            return true\r\n        }\r\n\r\n        function calculateKE(foodItem){\r\n            if(!areItemsTypeofNumber(foodItem.grams, foodItem.carbohydratesPer100Grams)) {\r\n                alert(ERROR_MESSAGE)\r\n                return 0\r\n            }\r\n\r\n            return (toNumberFormat(foodItem.grams) * (toNumberFormat(foodItem.carbohydratesPer100Grams) / 100)) / 10\r\n        }\r\n\r\n        function calculateCorrectionInsuline(bloodSugar, targetBloodSugar, correctionFactor){\r\n            if(!areItemsTypeofNumber(bloodSugar, targetBloodSugar, correctionFactor)){\r\n                if(bloodSugar !== '')\r\n                    alert(ERROR_MESSAGE)\r\n                return 0\r\n            }\r\n            const correctionInsulin = (toNumberFormat(bloodSugar) - toNumberFormat(targetBloodSugar)) /\r\n                toNumberFormat(correctionFactor)\r\n            return correctionInsulin\r\n        }\r\n\r\n        // correction insulin\r\n        const correctionInsulin = calculateCorrectionInsuline(bloodSugar, targetBloodSugar, correctionFactor)\r\n        setTotalCorrectionInsulin(Math.round(correctionInsulin * 10) / 10)\r\n\r\n        // total KE | totalIntermealKE\r\n        let KE = 0, intermealKE = 0\r\n        for(const foodItem of foodItems){\r\n            KE += calculateKE(foodItem)\r\n            intermealKE += foodItem.isIntermeal ? calculateKE(foodItem) : 0\r\n        }\r\n        setTotalKE(Math.round(KE * 10) / 10)\r\n        setTotalIntermealKE(Math.round(intermealKE * 10) / 10)\r\n        setTotalMainMealKE(Math.round((totalKE - totalIntermealKE) * 10) / 10)\r\n        \r\n        // total IE\r\n        if(!areItemsTypeofNumber(carbohydrateFactor)) {\r\n            alert(ERROR_MESSAGE)\r\n            return -1\r\n        }\r\n\r\n        let IE = KE * toNumberFormat(carbohydrateFactor)\r\n        IE += correctionInsulin\r\n        IE = Math.round(IE * 10) / 10\r\n\r\n        setTotalIE(IE)\r\n        outputRef.current.scrollIntoView({smooth:true})\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Insulin Rechner</h1>\r\n\r\n            <FixedInformationSection \r\n                setBloodSugar={setBloodSugar}\r\n                setTargetBloodSugar={setTargetBloodSugar}\r\n                setCorrectionFactor={setCorrectionFactor}\r\n                setCarbohydrateFactor={setCarbohydrateFactor}\r\n                bloodSugar={bloodSugar}\r\n                targetBloodSugar={targetBloodSugar}\r\n                correctionFactor={correctionFactor}\r\n                carbohydrateFactor={carbohydrateFactor}\r\n            />\r\n            <ListSection \r\n                foodItems={foodItems}\r\n                addNewFoodItem={addNewFoodItem}\r\n                handleIsIntermealChange={handleIsIntermealChange}\r\n                handleChange={handleChange}\r\n                deleteFoodItem={deleteFoodItem}\r\n            />\r\n            {/* <button>berechne KE</button> */}\r\n            <button \r\n                className='calculateIE-button'\r\n                onClick={calculateIE}\r\n            >berechne IE</button>\r\n            \r\n            <Output \r\n                totalIE={totalIE}\r\n                totalMainMealKE={totalMainMealKE}\r\n                totalIntermealKE={totalIntermealKE}\r\n                totalKE={totalKE}\r\n                totalCorrectionInsulin={totalCorrectionInsulin}\r\n                outputRef={outputRef}\r\n            />\r\n        </div>  \r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from \"react-dom\"\r\n\r\nimport App from './App.js'\r\n\r\nReactDOM.render(\r\n    <App />, \r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}