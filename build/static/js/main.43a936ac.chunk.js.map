{"version":3,"sources":["Components/Input.js","Components/FixedInformationSection.js","Components/Suggestion.js","Components/SuggestionList.js","Components/FoodItem.js","Components/ListSection.js","Components/Output.js","hooks/useLocalStorage.js","App.js","index.js"],"names":["Input","id","type","name","value","onChange","description","placeholder","unit","autoComplete","event","FixedInformationSection","setBloodSugar","setDayTimeChoice","setTargetBloodSugar","setCorrectionFactor","setCarbohydrateFactor","bloodSugar","dayTimeChoice","targetBloodSugar","correctionFactor","carbohydrateFactor","refreshPage","className","toString","target","onClick","Suggestion","suggestionText","handleSuggestionClick","SuggestionList","allSuggestions","searchingText","hideSuggestionList","matchingSuggestions","filter","slice","length","toLowerCase","map","key","Math","random","FoodItem","isPer100gSlideActive","per100gSlide","perPieceSlide","foodNameSuggestionsForPer100gSlide","foodNameSuggestionsForPerPieceSlide","handleIsIntermealChange","handlePer100gSlideValueChange","handlePerPieceSlideValueChange","deleteFoodItem","handleSlideChange","per100gSlideHtml","checked","isIntermeal","shouldDisplaySuggestions","grams","carbohydratesPer100Grams","perPieceSlideHtml","numberOfPieces","carbohydratesPerPiece","ListSection","foodItems","addNewFoodItem","element","Output","totalIE","totalMainMealKE","totalIntermealKE","totalKE","totalCorrectionInsulin","outputRef","ref","style","fontWeight","useLocalStorage","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","PREFIX","lastDayTime","App","lastSavedData","setLastSavedData","setFoodNameSuggestionsForPer100gSlide","setFoodNameSuggestionsForPerPieceSlide","getDayTime","setFoodItems","setTotalIE","setTotalKE","setTotalCorrectionInsulin","setTotalIntermealKE","setTotalMainMealKE","useRef","getCurrentDayTime","window","location","reload","capitalize","string","toUpperCase","Date","toLocaleTimeString","split","hours","minutes","time","toNumberFormat","newFoodItems","foodItem","isNameValid","newFoodNameSuggestion","toAddFoodNameSuggestions","newFoodNameSuggestions","Array","isArray","NewFoodNameSuggestion","some","foodNameSuggestion","addNewFoodNameSuggestionsToPer100gSlide","removeItem","toDeleteFoodNameSuggestion","removeIdx","idx","splice","deleteFoodNameSuggestionFromPer100gSlide","hasNameChanged","addNewFoodNameSuggestionsToPerPieceSlide","deleteFoodNameSuggestionFromPerPieceSlide","stringCopy","replace","number","parseFloat","Number","isNaN","calculateIE","shouldScroll","shouldDisplayError","ERROR_MESSAGE","areItemsTypeofNumber","items","every","item","calculateKE","alert","calculateCorrectionInsulin","correctionInsulin","round","KE","intermealKE","foodItemKE","IE","setTimeout","current","scrollIntoView","smooth","setInterval","activeSlideIdx","marginBottom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43a936ac.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Input(\r\n    {id, type='text', name='',value='', onChange='', description='', placeholder='', unit=''}) {\r\n    return (\r\n        <div>\r\n            <label> \r\n                {description}\r\n            </label>\r\n            <br />\r\n            <input\r\n                type={type}\r\n                autoComplete='off'\r\n                id={id}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange === '' ? () => 0 : (event) => onChange(event)}\r\n            ></input>\r\n            <label>\r\n                {unit}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\n\r\nexport default function FixedInformationSection(\r\n    {setBloodSugar, \r\n    setDayTimeChoice,\r\n    setTargetBloodSugar, \r\n    setCorrectionFactor,\r\n    setCarbohydrateFactor,\r\n    bloodSugar, \r\n    dayTimeChoice,\r\n    targetBloodSugar, \r\n    correctionFactor, \r\n    carbohydrateFactor,\r\n\r\n    refreshPage\r\n    }) {\r\n    \r\n    return (\r\n        <div className='space-around'>\r\n            <Input \r\n                name = 'BloodSugar'\r\n                type='number'\r\n                value = {bloodSugar.toString()}\r\n                description = 'Blutzucker'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setBloodSugar(event.target.value)}\r\n            />\r\n\r\n            <p className='center-elements day-time-choice-buttons'>\r\n                <button\r\n                    className={`automatic-day-time-choice-button \r\n                    ${dayTimeChoice === 'automatic' && 'active-button'}`}\r\n                    onClick={() => {\r\n                            setDayTimeChoice('automatic')\r\n                            refreshPage()\r\n                        }\r\n                }\r\n                >Automatic</button>\r\n\r\n                <button\r\n                    className={`morning-day-time-choice-button \r\n                    ${dayTimeChoice === 'morning' && 'active-button'}`}\r\n                    onClick={() => {\r\n                            setDayTimeChoice('morning')\r\n                            refreshPage()\r\n                        }\r\n                }\r\n                >Morgens</button>\r\n\r\n                <button\r\n                    className={`midday-day-time-choice-button \r\n                    ${dayTimeChoice === 'midday' && 'active-button'}`}\r\n                    onClick={() => {\r\n                            setDayTimeChoice('midday')\r\n                            refreshPage()\r\n                        }\r\n                }\r\n                >Mittags</button>\r\n\r\n                <button\r\n                    className={`evening-day-time-choice-button \r\n                    ${dayTimeChoice === 'evening' && 'active-button'}`}\r\n                    onClick={() => {\r\n                            setDayTimeChoice('evening')\r\n                            refreshPage()\r\n                        }\r\n                }\r\n                >Abends</button>\r\n            </p>\r\n\r\n            <Input \r\n                name = 'TargetBloodSugar'\r\n                type='number'\r\n                value = {targetBloodSugar}\r\n                description = 'Blutzucker Zielwert'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setTargetBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CorrectionFactor'\r\n                type='number'\r\n                value = {correctionFactor}\r\n                description = 'Korrektur-Faktor'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setCorrectionFactor(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CarbohydrateFactor'\r\n                type='number'\r\n                value = {carbohydrateFactor}\r\n                description = 'KE-Faktor'\r\n                onChange = {(event) => setCarbohydrateFactor(event.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Suggestion({suggestionText, handleSuggestionClick}) {\r\n    return (\r\n        <li\r\n            onClick={() => handleSuggestionClick(suggestionText)}\r\n        >\r\n            {suggestionText}\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport Suggestion from './Suggestion.js'\r\n\r\nexport default function SuggestionList(\r\n    {allSuggestions, searchingText, handleSuggestionClick, hideSuggestionList}) {\r\n    \r\n    const matchingSuggestions = searchingText === '' ? [] : allSuggestions.filter(suggestionText => {\r\n        const potentialMatch = suggestionText.slice(0, searchingText.length)\r\n        return potentialMatch.toLowerCase() === searchingText.toLowerCase()\r\n    })\r\n    \r\n    return (\r\n        <div>\r\n            {matchingSuggestions.length !== 0 && <ul className='suggestion-list'>\r\n            \r\n                <button\r\n                    className='hide-suggestion-list-button'\r\n                    onClick={() => hideSuggestionList()}\r\n                ></button>\r\n\r\n                {matchingSuggestions.map(suggestionText => <Suggestion \r\n                    key={Math.random()} \r\n                    suggestionText={suggestionText} \r\n                    handleSuggestionClick={handleSuggestionClick}\r\n                />)}\r\n            </ul>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\nimport SuggestionList from './SuggestionList.js'\r\n\r\nexport default function FoodItem(\r\n    {id, \r\n    isPer100gSlideActive=true,\r\n    per100gSlide={},\r\n    perPieceSlide={},\r\n\r\n    foodNameSuggestionsForPer100gSlide,\r\n    foodNameSuggestionsForPerPieceSlide,\r\n    handleIsIntermealChange, \r\n    handlePer100gSlideValueChange,\r\n    handlePerPieceSlideValueChange,\r\n    deleteFoodItem,\r\n    handleSuggestionClick,\r\n    handleSlideChange,\r\n    hideSuggestionList\r\n    }) {\r\n\r\n    const per100gSlideHtml = \r\n    <>\r\n        <label className='intermeal-checkbox'>\r\n                <input\r\n                    type = 'checkbox'\r\n                    checked = {per100gSlide.isIntermeal}\r\n                    onChange = {() => handleIsIntermealChange(id, 1)}\r\n                ></input> ZM?\r\n        </label>\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'name'\r\n            description = 'Name'\r\n            value = {per100gSlide.name}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n        />\r\n        {per100gSlide.shouldDisplaySuggestions && <SuggestionList \r\n            allSuggestions={foodNameSuggestionsForPer100gSlide}\r\n            searchingText={per100gSlide.name}\r\n            handleSuggestionClick={(suggestionText) => handleSuggestionClick(suggestionText, id, true)}\r\n            hideSuggestionList={() => hideSuggestionList(id, true)}\r\n        />}\r\n\r\n        <Input\r\n            id = {id}\r\n            name = 'grams'\r\n            type='number'\r\n            description = 'Gramm'\r\n            value = {per100gSlide.grams}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n        />\r\n        <Input\r\n            id = {id}\r\n            name = 'carbohydratesPer100Grams'\r\n            type='number'\r\n            description = 'Kohlenhydrate pro 100g'\r\n            value = {per100gSlide.carbohydratesPer100Grams}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n        />\r\n    </>\r\n\r\n    const perPieceSlideHtml = \r\n    <>\r\n         <label className='intermeal-checkbox'>\r\n                <input\r\n                    type = 'checkbox'\r\n                    checked = {perPieceSlide.isIntermeal}\r\n                    onChange = {() => handleIsIntermealChange(id, 2)}\r\n                ></input> ZM?\r\n        </label>\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'name'\r\n            description = 'Name'\r\n            value = {perPieceSlide.name}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n        />\r\n        {perPieceSlide.shouldDisplaySuggestions && <SuggestionList \r\n            allSuggestions={foodNameSuggestionsForPerPieceSlide}\r\n            searchingText={perPieceSlide.name}\r\n            handleSuggestionClick={(suggestionText) => handleSuggestionClick(suggestionText, id, false)}\r\n            hideSuggestionList={() => hideSuggestionList(id, false)}\r\n        />}\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'numberOfPieces'\r\n            type='number'\r\n            description = 'Anzahl'\r\n            value = {perPieceSlide.numberOfPieces}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n        />\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'carbohydratesPerPiece'\r\n            type='number'\r\n            description = 'Kohlenhydrate pro Stück'\r\n            value = {perPieceSlide.carbohydratesPerPiece}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n        />\r\n    </>\r\n\r\n    return (\r\n        <div>\r\n            <p className='center-elements'>\r\n                <button\r\n                    className={`per-100g-button ${isPer100gSlideActive && 'active-button'}`}\r\n                    onClick={() => handleSlideChange(id, true)}\r\n                >pro 100g</button>\r\n                \r\n                <button\r\n                    className={`per-piece-button ${!isPer100gSlideActive && 'active-button'}`}\r\n                    onClick={() => handleSlideChange(id, false)}\r\n                >pro Stück</button>\r\n            </p>\r\n\r\n            <div className='space-around'>\r\n                <button\r\n                    className = 'delete-food-item-button'\r\n                    onClick={() => deleteFoodItem(id)}\r\n                ></button>\r\n\r\n                {isPer100gSlideActive ? per100gSlideHtml : perPieceSlideHtml}\r\n            </div>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport FoodItem from './FoodItem'\r\n\r\nexport default function ListSection(\r\n    {foodItems=[], \r\n    foodNameSuggestionsForPer100gSlide=[],\r\n    foodNameSuggestionsForPerPieceSlide=[],\r\n    addNewFoodItem, \r\n    handleIsIntermealChange, \r\n    handlePer100gSlideValueChange, \r\n    handlePerPieceSlideValueChange, \r\n    deleteFoodItem,\r\n    handleSuggestionClick,\r\n    handleSlideChange,\r\n    hideSuggestionList\r\n    }) {\r\n    return (\r\n        <div>\r\n            <h3>Elemente</h3>\r\n            {foodItems.map(element => \r\n                <FoodItem \r\n                    key={element.key}\r\n                    id={element.id}\r\n                    isPer100gSlideActive={element.isPer100gSlideActive}\r\n                    per100gSlide={element.per100gSlide}\r\n                    perPieceSlide={element.perPieceSlide}\r\n                    \r\n                    foodNameSuggestionsForPer100gSlide={foodNameSuggestionsForPer100gSlide}\r\n                    foodNameSuggestionsForPerPieceSlide={foodNameSuggestionsForPerPieceSlide}\r\n                    handleIsIntermealChange={handleIsIntermealChange}\r\n                    handlePer100gSlideValueChange={handlePer100gSlideValueChange}\r\n                    handlePerPieceSlideValueChange={handlePerPieceSlideValueChange}\r\n                    deleteFoodItem={deleteFoodItem}\r\n                    handleSuggestionClick={handleSuggestionClick}\r\n                    handleSlideChange={handleSlideChange}\r\n                    hideSuggestionList={hideSuggestionList}\r\n             />)}\r\n             \r\n            <p>\r\n                <button \r\n                    className='add-new-food-item-button'\r\n                    onClick={() => addNewFoodItem()}\r\n                ></button>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Output(\r\n    {totalIE, totalMainMealKE, totalIntermealKE, totalKE, totalCorrectionInsulin, outputRef}) {\r\n    return (\r\n        <div ref={outputRef}>\r\n            {!(totalIE === '' || totalIE == null || totalIE <= 0) ? \r\n                <div>\r\n                    <hr />\r\n\r\n                    <div className='space-around'>\r\n                        \r\n                        <p className='output' >\r\n                            Hauptmahlzeit-KE : {totalMainMealKE} KE <br />\r\n                            Zwischenmahlzeit-KE : {totalIntermealKE} KE <br />\r\n                            Gesamt-KE: {totalKE} KE <br />\r\n                            <br />\r\n                            Korrektur-Insulin: {totalCorrectionInsulin} IE  <br />\r\n                            <span style={{fontWeight: 'bold'}}> Gesamt-Insulin: {totalIE} IE </span>\r\n                        </p>\r\n                            \r\n                    </div>\r\n                </div>\r\n            : ''}\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    // get value\r\n    const prefixedKey = PREFIX + key\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if(jsonValue != null) return JSON.parse(jsonValue)\r\n        if(typeof initialValue === \"function\"){\r\n            return initialValue()\r\n        } else{\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    // save value\r\n    useEffect(() =>{\r\n        if(value != null)\r\n            localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [/* prefixedKey, */ value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import React, {useState, useRef, useEffect} from 'react'\r\n\r\n\r\nimport './css/style.css'\r\nimport FixedInformationSection from './Components/FixedInformationSection'\r\nimport ListSection from './Components/ListSection'\r\nimport Output from './Components/Output.js'\r\n\r\nimport useLocalStorage from './hooks/useLocalStorage.js'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\n\r\nlet lastDayTime = ''\r\n\r\nexport default function App() {\r\n    const [dayTimeChoice, setDayTimeChoice] = useLocalStorage('dayTimeChoice', 'automatic')\r\n    const [lastSavedData, setLastSavedData] = useLocalStorage('lastSavedData', {foodItems:[]})\r\n    const [foodNameSuggestionsForPer100gSlide, setFoodNameSuggestionsForPer100gSlide] = \r\n        useLocalStorage('foodNameSuggestions-per100gSlide', [])\r\n\r\n    const [foodNameSuggestionsForPerPieceSlide, setFoodNameSuggestionsForPerPieceSlide] = \r\n        useLocalStorage('foodNameSuggestions-perPieceSlide', [])\r\n\r\n    const [bloodSugar, setBloodSugar] = useState('')\r\n    const [targetBloodSugar, setTargetBloodSugar] = useLocalStorage(`${getDayTime()}-targetBloodSugar`)\r\n    const [correctionFactor, setCorrectionFactor] = useLocalStorage(`${getDayTime()}-correctionFactor`)\r\n    const [carbohydrateFactor, setCarbohydrateFactor] = useLocalStorage(`${getDayTime()}-carbohydrateFactor`)\r\n\r\n    const [foodItems, setFoodItems] = useLocalStorage('foodItems', [])\r\n\r\n    const [totalIE, setTotalIE] = useState('')\r\n    const [totalKE, setTotalKE] = useState('')\r\n    const [totalCorrectionInsulin, setTotalCorrectionInsulin] = useState('')\r\n    const [totalIntermealKE, setTotalIntermealKE] = useState('')\r\n    const [totalMainMealKE, setTotalMainMealKE] = useState('')\r\n\r\n\r\n    const outputRef = useRef()\r\n\r\n    useEffect(() => {\r\n        lastDayTime = getCurrentDayTime()\r\n\r\n        // update every minute\r\n        setInterval(() => {\r\n            if(lastDayTime !== getCurrentDayTime()){\r\n                refreshPage()\r\n            }\r\n        }, 60000);\r\n    }, [])\r\n\r\n    function getDayTime(){\r\n        if(dayTimeChoice === 'automatic')\r\n            return getCurrentDayTime()\r\n        else\r\n            return dayTimeChoice\r\n    }\r\n\r\n    function refreshPage(){\r\n        window.location.reload();\r\n    }\r\n\r\n    function hideSuggestionList(id, isPer100gSlideActive){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id === foodItem.id){\r\n                const per100gSlide = {...foodItem.per100gSlide, shouldDisplaySuggestions: false}\r\n                const perPieceSlide = {...foodItem.perPieceSlide, shouldDisplaySuggestions: false}\r\n                \r\n                if(isPer100gSlideActive)\r\n                    return {...foodItem, per100gSlide:per100gSlide}\r\n                else\r\n                    return {...foodItem, perPieceSlide:perPieceSlide}\r\n            }\r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)   \r\n    }\r\n\r\n    function handleSlideChange(id, isPer100gSlideActive){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id === foodItem.id){\r\n                return {...foodItem, isPer100gSlideActive:  isPer100gSlideActive}\r\n            }\r\n            \r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)   \r\n    }\r\n\r\n    function capitalize(string){\r\n        if(typeof string !== 'string') return ''\r\n        const capitalizedString = `${string[0].toUpperCase()}${string.slice(1)}`\r\n        return capitalizedString\r\n    }\r\n\r\n    function addNewFoodNameSuggestionsToPer100gSlide(toAddFoodNameSuggestions){\r\n        let newFoodNameSuggestions = toAddFoodNameSuggestions\r\n        if(!Array.isArray(toAddFoodNameSuggestions)) newFoodNameSuggestions = [toAddFoodNameSuggestions]\r\n\r\n        newFoodNameSuggestions = newFoodNameSuggestions.filter(NewFoodNameSuggestion => {\r\n            const isAlreadyExisting = foodNameSuggestionsForPer100gSlide.some(foodNameSuggestion => \r\n                NewFoodNameSuggestion === foodNameSuggestion)\r\n            return !isAlreadyExisting\r\n        })\r\n        if(newFoodNameSuggestions.length === 0) return\r\n\r\n        newFoodNameSuggestions = [...foodNameSuggestionsForPer100gSlide, ...newFoodNameSuggestions]\r\n        setFoodNameSuggestionsForPer100gSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function deleteFoodNameSuggestionFromPer100gSlide(toDeleteFoodNameSuggestion){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodNameSuggestionsForPer100gSlide.length; idx++){\r\n            if(toDeleteFoodNameSuggestion === foodNameSuggestionsForPer100gSlide[idx]){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n        if(removeIdx == null) return\r\n\r\n        const newFoodNameSuggestions = [...foodNameSuggestionsForPer100gSlide]\r\n        newFoodNameSuggestions.splice(removeIdx, 1)\r\n        setFoodNameSuggestionsForPer100gSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function addNewFoodNameSuggestionsToPerPieceSlide(toAddFoodNameSuggestions){\r\n        let newFoodNameSuggestions = toAddFoodNameSuggestions\r\n        if(!Array.isArray(toAddFoodNameSuggestions)) newFoodNameSuggestions = [toAddFoodNameSuggestions]\r\n\r\n        newFoodNameSuggestions = newFoodNameSuggestions.filter(NewFoodNameSuggestion => {\r\n            const isAlreadyExisting = foodNameSuggestionsForPerPieceSlide.some(foodNameSuggestion => \r\n                NewFoodNameSuggestion === foodNameSuggestion)\r\n            return !isAlreadyExisting\r\n        })\r\n        if(newFoodNameSuggestions.length === 0) return\r\n\r\n        newFoodNameSuggestions = [...foodNameSuggestionsForPerPieceSlide, ...newFoodNameSuggestions]\r\n        setFoodNameSuggestionsForPerPieceSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function deleteFoodNameSuggestionFromPerPieceSlide(toDeleteFoodNameSuggestion){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodNameSuggestionsForPerPieceSlide.length; idx++){\r\n            if(toDeleteFoodNameSuggestion === foodNameSuggestionsForPerPieceSlide[idx]){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n        if(removeIdx == null) return\r\n\r\n        const newFoodNameSuggestions = [...foodNameSuggestionsForPerPieceSlide]\r\n        newFoodNameSuggestions.splice(removeIdx, 1)\r\n        setFoodNameSuggestionsForPerPieceSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function clearData(){\r\n        setFoodItems([])\r\n        setTotalIE(0)\r\n    }\r\n   \r\n    function saveData(){\r\n        const newData = {\r\n            foodItems: foodItems\r\n        }\r\n        setLastSavedData(newData)\r\n    }\r\n\r\n    function loadData(){\r\n        if(lastSavedData == null) return\r\n        const {foodItems} = lastSavedData\r\n\r\n        setFoodItems(foodItems)\r\n\r\n        setTimeout(() => {\r\n            calculateIE(false, false)\r\n        }, 100)\r\n    }\r\n\r\n    function handleSuggestionClick(suggestionText, id, isPer100gSlideActive){\r\n        const event = {target:{name:'name', value:suggestionText, id:id}}\r\n        isPer100gSlideActive ? handlePer100gSlideValueChange(event) : handlePerPieceSlideValueChange(event)\r\n    }\r\n\r\n    function getCurrentDayTime(){\r\n         const [hours, minutes] = new Date().toLocaleTimeString().split(':')\r\n        const time =  toNumberFormat(hours) + (toNumberFormat(minutes) / 60)\r\n        let dayTime = ''\r\n        \r\n        if(time <= 11.5){\r\n            dayTime = 'morning'\r\n        } else if(time <= 16){\r\n            dayTime = 'midday'\r\n        } else {\r\n            dayTime = 'evening'\r\n        }\r\n\r\n        return dayTime\r\n    }\r\n\r\n    function addNewFoodItem(){\r\n        const id = Math.random()\r\n        const newFoodItems = [...foodItems, {\r\n            key: Math.random(),\r\n            id: id,\r\n            isPer100gSlideActive: true,\r\n            per100gSlide: {\r\n                name: '',\r\n                grams: '',\r\n                carbohydratesPer100Grams: '',\r\n                isIntermeal: false,\r\n                shouldDisplaySuggestions: true\r\n            },\r\n            perPieceSlide: {\r\n                name: '',\r\n                numberOfPieces: '',\r\n                carbohydratesPerPiece: '',\r\n                isIntermeal: false,\r\n                shouldDisplaySuggestions: true\r\n            }\r\n        }]\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function deleteFoodItem(id){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodItems.length; idx++){\r\n            if(id === foodItems[idx].id){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n\r\n        const newFoodItems = [...foodItems]\r\n        newFoodItems.splice(removeIdx, 1)\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handlePer100gSlideValueChange(event){\r\n        const {name, value} = event.target\r\n\r\n        let {id} = event.target\r\n        id = toNumberFormat(id)\r\n\r\n        if(value[value.length - 1] === '-') return\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            // would not work with !==\r\n            if(id !== foodItem.id) return foodItem\r\n        \r\n            // getting the carbohydratesPer100Grams with the name from localStorage\r\n            // if they exist set the carbohydratesPer100Grams input value\r\n            if(name === 'name'){\r\n                const prefixedKey = `${PREFIX}foodItem-${value.toLowerCase()}-carbohydratesPer100Grams`\r\n                const jsonValue = localStorage.getItem(prefixedKey)\r\n                if(jsonValue != null){\r\n                    const carbohydratesPer100Grams = JSON.parse(jsonValue)\r\n\r\n                    const per100gSlide = {...foodItem.per100gSlide, [name]:value, shouldDisplaySuggestions: false,\r\n                        carbohydratesPer100Grams: carbohydratesPer100Grams}\r\n\r\n                    return {...foodItem, per100gSlide:per100gSlide}\r\n                }\r\n            }\r\n            \r\n            // storing the carbohydratesPer100Grams with name as a key in localStorage\r\n            // storing a new foodNameSuggestion in localStorage\r\n            const isNameValid = foodItem.per100gSlide.name !== '' && foodItem.per100gSlide.name != null \r\n                                && foodItem.per100gSlide.name[0] !== '.'\r\n            if(name === 'carbohydratesPer100Grams' && isNameValid){\r\n                const prefixedKey = `${PREFIX}foodItem-${foodItem.per100gSlide.name.toLowerCase()}-carbohydratesPer100Grams`\r\n                const newFoodNameSuggestion = capitalize(foodItem.per100gSlide.name.toLowerCase())\r\n                if(value !== '') {\r\n                    // store foodItems carbohydratesPer100Grams\r\n                    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n                    // foodNameSuggestion\r\n                    addNewFoodNameSuggestionsToPer100gSlide(newFoodNameSuggestion)\r\n                } else {\r\n                    localStorage.removeItem(prefixedKey)\r\n                    // foodNameSuggestion\r\n                    deleteFoodNameSuggestionFromPer100gSlide(newFoodNameSuggestion)\r\n                }\r\n            }\r\n            const hasNameChanged = name === 'name'\r\n            const per100gSlide = {...foodItem.per100gSlide, [name]:value, shouldDisplaySuggestions: hasNameChanged}\r\n            return {...foodItem, per100gSlide:per100gSlide}\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handlePerPieceSlideValueChange(event){\r\n        const {name, value} = event.target\r\n\r\n        let {id} = event.target\r\n        id = toNumberFormat(id)\r\n\r\n        if(value[value.length - 1] === '-') return\r\n\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            // would not work with !==\r\n            if(id !== foodItem.id) return foodItem\r\n        \r\n            // getting the carbohydratesPerPiece with the name from localStorage\r\n            // if they exist set the carbohydratesPerPiece input value\r\n            if(name === 'name'){\r\n                const prefixedKey = `${PREFIX}foodItem-${value.toLowerCase()}-carbohydratesPerPiece`\r\n                const jsonValue = localStorage.getItem(prefixedKey)\r\n                if(jsonValue != null){\r\n                    const carbohydratesPerPiece = JSON.parse(jsonValue)\r\n\r\n                    const perPieceSlide = {...foodItem.perPieceSlide, [name]:value, shouldDisplaySuggestions: false,\r\n                        carbohydratesPerPiece: carbohydratesPerPiece}\r\n\r\n                    return {...foodItem, perPieceSlide:perPieceSlide}\r\n                }\r\n            }\r\n            \r\n            // storing the carbohydratesPerPiece with name as a key in localStorage\r\n            // storing a new foodNameSuggestion in localStorage\r\n            const isNameValid = foodItem.perPieceSlide.name !== '' && foodItem.perPieceSlide.name != null \r\n                                && foodItem.perPieceSlide.name[0] !== '.'\r\n            if(name === 'carbohydratesPerPiece' && isNameValid){\r\n                const prefixedKey = `${PREFIX}foodItem-${foodItem.perPieceSlide.name.toLowerCase()}-carbohydratesPerPiece`\r\n                const newFoodNameSuggestion = capitalize(foodItem.perPieceSlide.name.toLowerCase())\r\n                if(value !== '') {\r\n                    // store foodItems carbohydratesPerPiece\r\n                    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n                    // foodNameSuggestion\r\n                    addNewFoodNameSuggestionsToPerPieceSlide(newFoodNameSuggestion)\r\n                } else {\r\n                    localStorage.removeItem(prefixedKey)\r\n                    // foodNameSuggestion\r\n                    deleteFoodNameSuggestionFromPerPieceSlide(newFoodNameSuggestion)\r\n                }\r\n            }\r\n            const hasNameChanged = name === 'name'\r\n            const perPieceSlide = {...foodItem.perPieceSlide, [name]:value, shouldDisplaySuggestions: hasNameChanged}\r\n            return {...foodItem, perPieceSlide:perPieceSlide}\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handleIsIntermealChange(id, activeSlideIdx){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id === foodItem.id){\r\n                if(activeSlideIdx === 1){\r\n                    const per100gSlide = {...foodItem.per100gSlide, isIntermeal: !foodItem.per100gSlide.isIntermeal}\r\n                    return {...foodItem, per100gSlide:per100gSlide}\r\n                } else {\r\n                    const perPieceSlide = {...foodItem.perPieceSlide, isIntermeal: !foodItem.perPieceSlide.isIntermeal}\r\n                    return {...foodItem, perPieceSlide:perPieceSlide}\r\n                }\r\n            }\r\n                \r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function toNumberFormat(string){\r\n        if(typeof string === 'number') return string\r\n        if(typeof string !== 'string') return -1\r\n\r\n        let stringCopy = string.slice()\r\n        stringCopy = stringCopy.replace(',', '.')\r\n        const number = parseFloat(stringCopy)\r\n        return Number.isNaN(number) ? -1 : number\r\n    }\r\n\r\n    function calculateIE(shouldScroll = true, shouldDisplayError = true){\r\n        const ERROR_MESSAGE = 'ein oder mehrere Werte sind nicht gültig'\r\n\r\n        function areItemsTypeofNumber(...items){\r\n            return items.every(item => toNumberFormat(item) !== -1)\r\n        }\r\n\r\n        function calculateKE(foodItem){\r\n            if(foodItem.isPer100gSlideActive){\r\n                const grams = foodItem.per100gSlide.grams\r\n                const carbohydratesPer100Grams = foodItem.per100gSlide.carbohydratesPer100Grams\r\n\r\n                if(!areItemsTypeofNumber(grams, carbohydratesPer100Grams)) {\r\n                    if(shouldDisplayError)\r\n                        alert(ERROR_MESSAGE)\r\n                    return 0\r\n                }\r\n\r\n                return (toNumberFormat(grams) * (toNumberFormat(carbohydratesPer100Grams) / 100)) / 10\r\n            } else {\r\n                const numberOfPieces = foodItem.perPieceSlide.numberOfPieces\r\n                const carbohydratesPerPiece = foodItem.perPieceSlide.carbohydratesPerPiece\r\n                \r\n                if(!areItemsTypeofNumber(numberOfPieces, carbohydratesPerPiece)) {\r\n                    if(shouldDisplayError)\r\n                        alert(ERROR_MESSAGE)\r\n                    return 0\r\n                }\r\n\r\n                return toNumberFormat(numberOfPieces) * toNumberFormat(carbohydratesPerPiece) / 10\r\n            }\r\n        }\r\n\r\n        function calculateCorrectionInsulin(bloodSugar, targetBloodSugar, correctionFactor){\r\n            if(!areItemsTypeofNumber(bloodSugar, targetBloodSugar, correctionFactor)){\r\n                if(bloodSugar !== '' && shouldDisplayError)\r\n                    alert(ERROR_MESSAGE)\r\n                return 0\r\n            }\r\n            const correctionInsulin = (toNumberFormat(bloodSugar) - toNumberFormat(targetBloodSugar)) /\r\n                toNumberFormat(correctionFactor)\r\n            return correctionInsulin\r\n        }\r\n\r\n        // correction insulin\r\n        const correctionInsulin = calculateCorrectionInsulin(bloodSugar, targetBloodSugar, correctionFactor)\r\n        setTotalCorrectionInsulin(Math.round(correctionInsulin * 10) / 10)\r\n\r\n        // total KE | totalIntermealKE\r\n        let KE = 0, intermealKE = 0\r\n        for(const foodItem of foodItems){\r\n            const foodItemKE = calculateKE(foodItem)\r\n            KE += foodItemKE\r\n            if(foodItem.isPer100gSlideActive)\r\n                intermealKE += foodItem.per100gSlide.isIntermeal ? foodItemKE : 0\r\n            else\r\n                intermealKE += foodItem.perPieceSlide.isIntermeal ? foodItemKE : 0\r\n        }\r\n        setTotalKE(Math.round(KE * 10) / 10)\r\n        setTotalIntermealKE(Math.round(intermealKE * 10) / 10)\r\n        setTotalMainMealKE(Math.round((KE - intermealKE) * 10) / 10)\r\n        \r\n        // total IE\r\n        if(!areItemsTypeofNumber(carbohydrateFactor)) {\r\n            if(shouldDisplayError)\r\n                alert(ERROR_MESSAGE)\r\n            return -1\r\n        }\r\n\r\n        let IE = KE * toNumberFormat(carbohydrateFactor)\r\n        IE += correctionInsulin\r\n        IE = Math.round(IE * 10) / 10\r\n\r\n        setTotalIE(IE)\r\n\r\n        if(shouldScroll)\r\n            // needed because of async state setting\r\n            setTimeout(() => {\r\n                outputRef.current.scrollIntoView({smooth:true})\r\n            }, 5)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Insulin Rechner</h1>\r\n            <p>\r\n                <button\r\n                    className='clear-data-button space-around'\r\n                    onClick = {clearData}\r\n                    >Daten löschen</button>\r\n\r\n                <button\r\n                    className='load-data-button'\r\n                    onClick = {loadData}\r\n                >Daten laden</button>\r\n            </p>\r\n\r\n            <hr className='destop-hr new-section-hr'/>\r\n\r\n            <FixedInformationSection \r\n                setBloodSugar={setBloodSugar}\r\n                setDayTimeChoice={setDayTimeChoice}\r\n                setTargetBloodSugar={setTargetBloodSugar}\r\n                setCorrectionFactor={setCorrectionFactor}\r\n                setCarbohydrateFactor={setCarbohydrateFactor}\r\n                bloodSugar={bloodSugar}\r\n                dayTimeChoice={dayTimeChoice}\r\n                targetBloodSugar={targetBloodSugar}\r\n                correctionFactor={correctionFactor}\r\n                carbohydrateFactor={carbohydrateFactor}\r\n\r\n                refreshPage={refreshPage}\r\n            />\r\n\r\n            <hr className='destop-hr new-section-hr'/>\r\n\r\n            <ListSection \r\n                foodItems={foodItems}\r\n                foodNameSuggestionsForPer100gSlide={foodNameSuggestionsForPer100gSlide}\r\n                foodNameSuggestionsForPerPieceSlide={foodNameSuggestionsForPerPieceSlide}\r\n                addNewFoodItem={addNewFoodItem}\r\n                handleIsIntermealChange={handleIsIntermealChange}\r\n                handlePer100gSlideValueChange={handlePer100gSlideValueChange}\r\n                handlePerPieceSlideValueChange={handlePerPieceSlideValueChange}\r\n                deleteFoodItem={deleteFoodItem}\r\n                handleSuggestionClick={handleSuggestionClick}\r\n                handleSlideChange={handleSlideChange}\r\n                hideSuggestionList={hideSuggestionList}\r\n            />\r\n\r\n            <p style={{marginBottom:'20px'}}>\r\n                <button\r\n                    className='save-data-button space-around'\r\n                    onClick = {saveData}\r\n                >Daten speichen</button>\r\n\r\n                <button \r\n                    className='calculateIE-button'\r\n                    onClick={calculateIE}\r\n                >Berechne IE</button>\r\n            </p>\r\n\r\n            <Output \r\n                totalIE={totalIE}\r\n                totalMainMealKE={totalMainMealKE}\r\n                totalIntermealKE={totalIntermealKE}\r\n                totalKE={totalKE}\r\n                totalCorrectionInsulin={totalCorrectionInsulin}\r\n                outputRef={outputRef}\r\n            />\r\n        </div>  \r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from \"react-dom\"\r\n\r\nimport App from './App.js'\r\n\r\nReactDOM.render(\r\n    <App />, \r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}