{"version":3,"sources":["Components/Input.js","Components/FixedInformationSection.js","Components/Suggestion.js","Components/SuggestionList.js","Components/FoodItem.js","Components/ListSection.js","Components/Output.js","hooks/useLocalStorage.js","App.js","index.js"],"names":["Input","id","type","name","value","onChange","description","placeholder","unit","autoComplete","event","FixedInformationSection","setBloodSugar","setTargetBloodSugar","setCorrectionFactor","setCarbohydrateFactor","bloodSugar","targetBloodSugar","correctionFactor","carbohydrateFactor","className","toString","target","Suggestion","suggestionText","handleSuggestionClick","onClick","SuggestionList","allSuggestions","searchingText","matchingSuggestions","filter","slice","length","toLowerCase","map","key","Math","random","FoodItem","isPer100gSlideActive","per100gSlide","perPieceSlide","foodNameSuggestionsForPer100gSlide","foodNameSuggestionsForPerPieceSlide","handleIsIntermealChange","handlePer100gSlideValueChange","handlePerPieceSlideValueChange","deleteFoodItem","handleSlideChange","per100gSlideHtml","checked","isIntermeal","shouldDisplaySuggestions","grams","carbohydratesPer100Grams","perPieceSlideHtml","numberOfPieces","carbohydratesPerPiece","ListSection","foodItems","addNewFoodItem","element","Output","totalIE","totalMainMealKE","totalIntermealKE","totalKE","totalCorrectionInsulin","outputRef","ref","undefined","style","fontWeight","SwiperCore","use","Pagination","useLocalStorage","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","PREFIX","hasRerenderedSince60sec","App","lastSavedData","setLastSavedData","setFoodNameSuggestionsForPer100gSlide","setFoodNameSuggestionsForPerPieceSlide","getCurrentDayTime","setFoodItems","setTotalIE","setTotalKE","setTotalCorrectionInsulin","setTotalIntermealKE","setTotalMainMealKE","useRef","getAllFoodItemsInLocalStorage","isPer100gSlide","everyKey","Object","keys","allFoodItemKeysInLocalStorage","wordsInKey","split","hasCorrectPrefix","foodItemKey","capitalize","push","string","toUpperCase","addNewFoodNameSuggestionsToPer100gSlide","toAddFoodNameSuggestions","newFoodNameSuggestions","Array","isArray","NewFoodNameSuggestion","some","foodNameSuggestion","addNewFoodNameSuggestionsToPerPieceSlide","Date","toLocaleTimeString","hours","minutes","time","toNumberFormat","newFoodItems","foodItem","isNameValid","newFoodNameSuggestion","removeItem","toDeleteFoodNameSuggestion","removeIdx","idx","splice","deleteFoodNameSuggestionFromPer100gSlide","hasNameChanged","deleteFoodNameSuggestionFromPerPieceSlide","stringCopy","replace","number","parseFloat","Number","isNaN","calculateIE","shouldScroll","shouldDisplayError","ERROR_MESSAGE","areItemsTypeofNumber","items","every","item","calculateKE","alert","calculateCorrectionInsulin","correctionInsulin","round","KE","intermealKE","foodItemKE","IE","setTimeout","current","scrollIntoView","smooth","setInterval","window","location","reload","activeSlideIdx","marginBottom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f2dfe7a8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Input(\r\n    {id, type='text', name='',value='', onChange='', description='', placeholder='', unit=''}) {\r\n    return (\r\n        <div>\r\n            <label> \r\n                {description}\r\n            </label>\r\n            <br />\r\n            <input\r\n                type={type}\r\n                autoComplete='off'\r\n                id={id}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange === '' ? () => 0 : (event) => onChange(event)}\r\n            ></input>\r\n            <label>\r\n                {unit}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\n\r\nexport default function FixedInformationSection(\r\n    {setBloodSugar, \r\n    setTargetBloodSugar, \r\n    setCorrectionFactor,\r\n    setCarbohydrateFactor,\r\n    bloodSugar, \r\n    targetBloodSugar, \r\n    correctionFactor, \r\n    carbohydrateFactor\r\n    }) {\r\n    \r\n    return (\r\n        <div className='space-around'>\r\n            <Input \r\n                name = 'BloodSugar'\r\n                type='number'\r\n                value = {bloodSugar.toString()}\r\n                description = 'Blutzucker'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'TargetBloodSugar'\r\n                type='number'\r\n                value = {targetBloodSugar}\r\n                description = 'Blutzucker Zielwert'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setTargetBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CorrectionFactor'\r\n                type='number'\r\n                value = {correctionFactor}\r\n                description = 'Korrektur-Faktor'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setCorrectionFactor(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CarbohydrateFactor'\r\n                type='number'\r\n                value = {carbohydrateFactor}\r\n                description = 'KE-Faktor'\r\n                onChange = {(event) => setCarbohydrateFactor(event.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Suggestion({suggestionText, handleSuggestionClick}) {\r\n    return (\r\n        <li\r\n            onClick={() => handleSuggestionClick(suggestionText)}\r\n        >\r\n            {suggestionText}\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport Suggestion from './Suggestion.js'\r\n\r\nexport default function SuggestionList({allSuggestions, searchingText, handleSuggestionClick}) {\r\n    \r\n    const matchingSuggestions = searchingText === '' ? [] : allSuggestions.filter(suggestionText => {\r\n        const potentialMatch = suggestionText.slice(0, searchingText.length)\r\n        return potentialMatch.toLowerCase() === searchingText.toLowerCase()\r\n    })\r\n    \r\n    return (\r\n        <div>\r\n            {matchingSuggestions.length !== 0 && <ul className='suggestion-list'>\r\n                {matchingSuggestions.map(suggestionText => <Suggestion \r\n                    key={Math.random()} \r\n                    suggestionText={suggestionText} \r\n                    handleSuggestionClick={handleSuggestionClick}\r\n                />)}\r\n            </ul>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Swiper, SwiperSlide} from 'swiper/react'\r\nimport SwiperCore, {Pagination} from 'swiper'\r\nimport 'swiper/swiper-bundle.min.css'\r\n\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\nimport SuggestionList from './SuggestionList.js'\r\n\r\nSwiperCore.use([Pagination])\r\n\r\nexport default function FoodItem(\r\n    {id, \r\n    isPer100gSlideActive=true,\r\n    per100gSlide={},\r\n    perPieceSlide={},\r\n\r\n    foodNameSuggestionsForPer100gSlide,\r\n    foodNameSuggestionsForPerPieceSlide,\r\n    handleIsIntermealChange, \r\n    handlePer100gSlideValueChange,\r\n    handlePerPieceSlideValueChange,\r\n    deleteFoodItem,\r\n    handleSuggestionClick,\r\n    handleSlideChange\r\n    }) {\r\n\r\n    const per100gSlideHtml = \r\n    <>\r\n        <label className='intermeal-checkbox'>\r\n                <input\r\n                    type = 'checkbox'\r\n                    checked = {per100gSlide.isIntermeal}\r\n                    onChange = {() => handleIsIntermealChange(id, 1)}\r\n                ></input> ZM?\r\n        </label>\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'name'\r\n            description = 'Name'\r\n            value = {per100gSlide.name}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n        />\r\n        {per100gSlide.shouldDisplaySuggestions && <SuggestionList \r\n            allSuggestions={foodNameSuggestionsForPer100gSlide}\r\n            searchingText={per100gSlide.name}\r\n            handleSuggestionClick={(suggestionText) => handleSuggestionClick(suggestionText, id, true)}\r\n        />}\r\n\r\n        <Input\r\n            id = {id}\r\n            name = 'grams'\r\n            type='number'\r\n            description = 'Gramm'\r\n            value = {per100gSlide.grams}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n        />\r\n        <Input\r\n            id = {id}\r\n            name = 'carbohydratesPer100Grams'\r\n            type='number'\r\n            description = 'Kohlenhydrate pro 100g'\r\n            value = {per100gSlide.carbohydratesPer100Grams}\r\n            onChange = {(event) => handlePer100gSlideValueChange(event)}\r\n        />\r\n    </>\r\n\r\n    const perPieceSlideHtml = \r\n    <>\r\n         <label className='intermeal-checkbox'>\r\n                <input\r\n                    type = 'checkbox'\r\n                    checked = {perPieceSlide.isIntermeal}\r\n                    onChange = {() => handleIsIntermealChange(id, 2)}\r\n                ></input> ZM?\r\n        </label>\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'name'\r\n            description = 'Name'\r\n            value = {perPieceSlide.name}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n        />\r\n        {perPieceSlide.shouldDisplaySuggestions && <SuggestionList \r\n            allSuggestions={foodNameSuggestionsForPerPieceSlide}\r\n            searchingText={perPieceSlide.name}\r\n            handleSuggestionClick={(suggestionText) => handleSuggestionClick(suggestionText, id, false)}\r\n        />}\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'numberOfPieces'\r\n            type='number'\r\n            description = 'Anzahl'\r\n            value = {perPieceSlide.numberOfPieces}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n        />\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'carbohydratesPerPiece'\r\n            type='number'\r\n            description = 'Kohlenhydrate pro Stück'\r\n            value = {perPieceSlide.carbohydratesPerPiece}\r\n            onChange = {(event) => handlePerPieceSlideValueChange(event)}\r\n        />\r\n    </>\r\n\r\n    const slides = [per100gSlideHtml, perPieceSlideHtml]\r\n\r\n    return (\r\n        <div>\r\n            <p className='center-elements'>\r\n                <button\r\n                    className={`per-100g-button ${isPer100gSlideActive && 'active-button'}`}\r\n                    onClick={() => handleSlideChange(id, true)}\r\n                >pro 100g</button>\r\n                \r\n                <button\r\n                    className={`per-piece-button ${!isPer100gSlideActive && 'active-button'}`}\r\n                    onClick={() => handleSlideChange(id, false)}\r\n                >pro Stück</button>\r\n            </p>\r\n\r\n            <div className='space-around'>\r\n                <button\r\n                    className = 'delete-food-item-button'\r\n                    onClick={() => deleteFoodItem(id)}\r\n                ></button>\r\n\r\n                {isPer100gSlideActive ? per100gSlideHtml : perPieceSlideHtml}\r\n            </div>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport FoodItem from './FoodItem'\r\n\r\nexport default function ListSection(\r\n    {foodItems=[], \r\n    foodNameSuggestionsForPer100gSlide=[],\r\n    foodNameSuggestionsForPerPieceSlide=[],\r\n    addNewFoodItem, \r\n    handleIsIntermealChange, \r\n    handlePer100gSlideValueChange, \r\n    handlePerPieceSlideValueChange, \r\n    deleteFoodItem,\r\n    handleSuggestionClick,\r\n    handleSlideChange\r\n    }) {\r\n    return (\r\n        <div>\r\n            <h3>Elemente</h3>\r\n            {foodItems.map(element => \r\n                <FoodItem \r\n                    key={element.key}\r\n                    id={element.id}\r\n                    isPer100gSlideActive={element.isPer100gSlideActive}\r\n                    per100gSlide={element.per100gSlide}\r\n                    perPieceSlide={element.perPieceSlide}\r\n                    \r\n                    foodNameSuggestionsForPer100gSlide={foodNameSuggestionsForPer100gSlide}\r\n                    foodNameSuggestionsForPerPieceSlide={foodNameSuggestionsForPerPieceSlide}\r\n                    handleIsIntermealChange={handleIsIntermealChange}\r\n                    handlePer100gSlideValueChange={handlePer100gSlideValueChange}\r\n                    handlePerPieceSlideValueChange={handlePerPieceSlideValueChange}\r\n                    deleteFoodItem={deleteFoodItem}\r\n                    handleSuggestionClick={handleSuggestionClick}\r\n                    handleSlideChange={handleSlideChange}\r\n             />)}\r\n             \r\n            <p>\r\n                <button \r\n                    className='add-new-food-item-button'\r\n                    onClick={() => addNewFoodItem()}\r\n                ></button>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Output(\r\n    {totalIE, totalMainMealKE, totalIntermealKE, totalKE, totalCorrectionInsulin, outputRef}) {\r\n    return (\r\n        <div ref={outputRef}>\r\n            {!(totalIE === '' || totalIE == undefined || totalIE <= 0) ? \r\n                <div>\r\n                    <hr />\r\n\r\n                    <div className='space-around'>\r\n                        \r\n                        <p className='output' >\r\n                            Hauptmahlzeit-KE : {totalMainMealKE} KE <br />\r\n                            Zwischenmahlzeit-KE : {totalIntermealKE} KE <br />\r\n                            Gesamt-KE: {totalKE} KE <br />\r\n                            <br />\r\n                            Korrektur-Insulin: {totalCorrectionInsulin} IE  <br />\r\n                            <span style={{fontWeight: 'bold'}}> Gesamt-Insulin: {totalIE} IE </span>\r\n                        </p>\r\n                            \r\n                    </div>\r\n                </div>\r\n            : ''}\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    // get value\r\n    const prefixedKey = PREFIX + key\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if(jsonValue != null) return JSON.parse(jsonValue)\r\n        if(typeof initialValue === \"function\"){\r\n            return initialValue()\r\n        } else{\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    // save value\r\n    useEffect(() =>{\r\n        if(value != null)\r\n            localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [prefixedKey, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import React, {useState, useRef, useEffect} from 'react'\r\n\r\n\r\nimport './css/style.css'\r\nimport FixedInformationSection from './Components/FixedInformationSection'\r\nimport ListSection from './Components/ListSection'\r\nimport Output from './Components/Output.js'\r\n\r\nimport useLocalStorage from './hooks/useLocalStorage.js'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\nlet hasRerenderedSince60sec = false\r\n\r\nexport default function App() {\r\n    const [lastSavedData, setLastSavedData] = useLocalStorage('lastSavedData', {foodItems:[]})\r\n    const [foodNameSuggestions, setFoodNameSuggestions] = useLocalStorage('foodNameSuggestions', [])\r\n    const [foodNameSuggestionsForPer100gSlide, setFoodNameSuggestionsForPer100gSlide] = \r\n        useLocalStorage('foodNameSuggestions-per100gSlide', [])\r\n\r\n    const [foodNameSuggestionsForPerPieceSlide, setFoodNameSuggestionsForPerPieceSlide] = \r\n        useLocalStorage('foodNameSuggestions-perPieceSlide', [])\r\n\r\n    const [bloodSugar, setBloodSugar] = useState('')\r\n    const [targetBloodSugar, setTargetBloodSugar] = useLocalStorage(`${getCurrentDayTime()}-targetBloodSugar`)\r\n    const [correctionFactor, setCorrectionFactor] = useLocalStorage(`${getCurrentDayTime()}-correctionFactor`)\r\n    const [carbohydrateFactor, setCarbohydrateFactor] = useLocalStorage(`${getCurrentDayTime()}-carbohydrateFactor`)\r\n\r\n    const [foodItems, setFoodItems] = useLocalStorage('foodItems', [])\r\n\r\n    const [totalIE, setTotalIE] = useState('')\r\n    const [totalKE, setTotalKE] = useState('')\r\n    const [totalCorrectionInsulin, setTotalCorrectionInsulin] = useState('')\r\n    const [totalIntermealKE, setTotalIntermealKE] = useState('')\r\n    const [totalMainMealKE, setTotalMainMealKE] = useState('')\r\n\r\n    const outputRef = useRef()\r\n\r\n    useEffect(() => {\r\n        /* setFoodItems( correctFoodItems(foodItems) )\r\n        setLastSavedData( correctLastSavedData() ) */\r\n\r\n        // not working has some old state of foodItems even if the state has changed\r\n        /* setTimeout(() => \r\n            calculateIE(false, false)\r\n        , 100) */\r\n\r\n        localStorage.removeItem(`${PREFIX}foodNameSuggestions`)\r\n        \r\n        addAllFoodItemsInLocalStorageToFoodNameSuggestionsForPer100gSlide()\r\n        addAllFoodItemsInLocalStorageToFoodNameSuggestionsForPerPieceSlide()\r\n\r\n        // update every minute\r\n        setInterval(() => {\r\n            if(!hasRerenderedSince60sec)\r\n                refreshPage()\r\n            else\r\n                hasRerenderedSince60sec = false\r\n            \r\n        }, 60000);\r\n    }, [])\r\n\r\n    function addAllFoodItemsInLocalStorageToFoodNameSuggestionsForPer100gSlide(){\r\n        const allFoodItemsInLocalStorage = getAllFoodItemsInLocalStorage(true)\r\n\r\n        addNewFoodNameSuggestionsToPer100gSlide(allFoodItemsInLocalStorage)\r\n    }\r\n\r\n    function addAllFoodItemsInLocalStorageToFoodNameSuggestionsForPerPieceSlide(){\r\n        const allFoodItemsInLocalStorage = getAllFoodItemsInLocalStorage(false)\r\n\r\n        addNewFoodNameSuggestionsToPerPieceSlide(allFoodItemsInLocalStorage)\r\n    }\r\n\r\n    function getAllFoodItemsInLocalStorage(isPer100gSlide=true){\r\n        const everyKey = Object.keys(localStorage)\r\n        const allFoodItemKeysInLocalStorage = []\r\n        \r\n        for(const key of everyKey){\r\n            const wordsInKey = key.split('-')\r\n            if(wordsInKey.length < 4) continue\r\n    \r\n            const hasCorrectPrefix = `${PREFIX}foodItem` === `${wordsInKey[0]}-${wordsInKey[1]}-${wordsInKey[2]}` &&\r\n                (isPer100gSlide ? \r\n                    wordsInKey[4] === 'carbohydratesPer100Grams' : wordsInKey[4] === 'carbohydratesPerPiece')\r\n\r\n            if(hasCorrectPrefix){\r\n                const foodItemKey = capitalize(wordsInKey[3])\r\n                allFoodItemKeysInLocalStorage.push(foodItemKey)\r\n            }\r\n        }\r\n        return allFoodItemKeysInLocalStorage\r\n    }\r\n    \r\n\r\n    function prefillFoodNameSuggestionsForPer100gSlide(){\r\n        const prefixedKey = `${PREFIX}foodNameSuggestions`\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n\r\n        if(jsonValue == null) return\r\n\r\n        const value = JSON.parse(jsonValue)\r\n        setFoodNameSuggestionsForPer100gSlide(value)\r\n    }\r\n\r\n    /* function correctFoodItems(foodItemsArg){\r\n        const newFoodItems = foodItemsArg.map(foodItem => {\r\n            if(foodItem.slide1 == null) return foodItem\r\n\r\n            let {\r\n                activeSlideIdx:isPer100gSlideActive,\r\n                slide1:per100gSlide,\r\n                slide2:perPieceSlide \r\n            } = foodItem\r\n            \r\n            delete foodItem.slide1\r\n            delete foodItem.slide2\r\n            delete foodItem.activeSlideIdx\r\n\r\n            isPer100gSlideActive = isPer100gSlideActive === 1\r\n            \r\n            return {\r\n                ...foodItem,\r\n                isPer100gSlideActive: isPer100gSlideActive,\r\n                per100gSlide: per100gSlide,\r\n                perPieceSlide: perPieceSlide\r\n            }\r\n        })\r\n        return newFoodItems\r\n    }\r\n\r\n    function correctLastSavedData(){\r\n        const newLastSavedData = {foodItems: correctFoodItems(lastSavedData.foodItems)}\r\n        return newLastSavedData\r\n    } */\r\n\r\n\r\n    function refreshPage(){\r\n        window.location.reload();\r\n    }\r\n\r\n    function handleSlideChange(id, isPer100gSlideActive){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id == foodItem.id){\r\n                return {...foodItem, isPer100gSlideActive:  isPer100gSlideActive}\r\n            }\r\n            \r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)   \r\n    }\r\n\r\n    function capitalize(string){\r\n        if(typeof string !== 'string') return ''\r\n        const capitalizedString = `${string[0].toUpperCase()}${string.slice(1)}`\r\n        return capitalizedString\r\n    }\r\n\r\n    function addNewFoodNameSuggestionsToPer100gSlide(toAddFoodNameSuggestions){\r\n        let newFoodNameSuggestions = toAddFoodNameSuggestions\r\n        if(!Array.isArray(toAddFoodNameSuggestions)) newFoodNameSuggestions = [toAddFoodNameSuggestions]\r\n\r\n        newFoodNameSuggestions = newFoodNameSuggestions.filter(NewFoodNameSuggestion => {\r\n            const isAlreadyExisting = foodNameSuggestionsForPer100gSlide.some(foodNameSuggestion => \r\n                NewFoodNameSuggestion === foodNameSuggestion)\r\n            return !isAlreadyExisting\r\n        })\r\n        if(newFoodNameSuggestions.length === 0) return\r\n\r\n        newFoodNameSuggestions = [...foodNameSuggestionsForPer100gSlide, ...newFoodNameSuggestions]\r\n        setFoodNameSuggestionsForPer100gSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function deleteFoodNameSuggestionFromPer100gSlide(toDeleteFoodNameSuggestion){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodNameSuggestionsForPer100gSlide.length; idx++){\r\n            if(toDeleteFoodNameSuggestion === foodNameSuggestionsForPer100gSlide[idx]){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n        if(removeIdx == null) return\r\n\r\n        const newFoodNameSuggestions = [...foodNameSuggestionsForPer100gSlide]\r\n        newFoodNameSuggestions.splice(removeIdx, 1)\r\n        setFoodNameSuggestionsForPer100gSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function addNewFoodNameSuggestionsToPerPieceSlide(toAddFoodNameSuggestions){\r\n        let newFoodNameSuggestions = toAddFoodNameSuggestions\r\n        if(!Array.isArray(toAddFoodNameSuggestions)) newFoodNameSuggestions = [toAddFoodNameSuggestions]\r\n\r\n        newFoodNameSuggestions = newFoodNameSuggestions.filter(NewFoodNameSuggestion => {\r\n            const isAlreadyExisting = foodNameSuggestionsForPerPieceSlide.some(foodNameSuggestion => \r\n                NewFoodNameSuggestion === foodNameSuggestion)\r\n            return !isAlreadyExisting\r\n        })\r\n        if(newFoodNameSuggestions.length === 0) return\r\n\r\n        newFoodNameSuggestions = [...foodNameSuggestionsForPerPieceSlide, ...newFoodNameSuggestions]\r\n        setFoodNameSuggestionsForPerPieceSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function deleteFoodNameSuggestionFromPerPieceSlide(toDeleteFoodNameSuggestion){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodNameSuggestionsForPerPieceSlide.length; idx++){\r\n            if(toDeleteFoodNameSuggestion === foodNameSuggestionsForPerPieceSlide[idx]){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n        if(removeIdx == null) return\r\n\r\n        const newFoodNameSuggestions = [...foodNameSuggestionsForPerPieceSlide]\r\n        newFoodNameSuggestions.splice(removeIdx, 1)\r\n        setFoodNameSuggestionsForPerPieceSlide(newFoodNameSuggestions)\r\n    }\r\n\r\n    function clearData(){\r\n        setFoodItems([])\r\n        setTotalIE(0)\r\n    }\r\n   \r\n    function saveData(){\r\n        const newData = {\r\n            foodItems: foodItems\r\n        }\r\n        setLastSavedData(newData)\r\n    }\r\n\r\n    function loadData(){\r\n        if(lastSavedData == null) return\r\n        const {foodItems} = lastSavedData\r\n\r\n        setFoodItems(foodItems)\r\n\r\n        setTimeout(() => {\r\n            calculateIE(false, false)\r\n        }, 100)\r\n    }\r\n\r\n    function handleSuggestionClick(suggestionText, id, isPer100gSlideActive){\r\n        const event = {target:{name:'name', value:suggestionText, id:id}}\r\n        isPer100gSlideActive ? handlePer100gSlideValueChange(event) : handlePerPieceSlideValueChange(event)\r\n    }\r\n\r\n    function getCurrentDayTime(){\r\n         const [hours, minutes] = new Date().toLocaleTimeString().split(':')\r\n        const time =  toNumberFormat(hours) + (toNumberFormat(minutes) / 60)\r\n        let dayTime = ''\r\n        \r\n        if(time <= 11.5){\r\n            dayTime = 'morning'\r\n        } else if(time <= 16){\r\n            dayTime = 'midday'\r\n        } else {\r\n            dayTime = 'evening'\r\n        }\r\n\r\n        return dayTime\r\n    }\r\n\r\n    function addNewFoodItem(){\r\n        const id = Math.random()\r\n        const newFoodItems = [...foodItems, {\r\n            key: Math.random(),\r\n            id: id,\r\n            isPer100gSlideActive: true,\r\n            per100gSlide: {\r\n                name: '',\r\n                grams: '',\r\n                carbohydratesPer100Grams: '',\r\n                isIntermeal: false,\r\n                shouldDisplaySuggestions: true\r\n            },\r\n            perPieceSlide: {\r\n                name: '',\r\n                numberOfPieces: '',\r\n                carbohydratesPerPiece: '',\r\n                isIntermeal: false,\r\n                shouldDisplaySuggestions: true\r\n            }\r\n        }]\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function deleteFoodItem(id){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodItems.length; idx++){\r\n            if(id == foodItems[idx].id){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n\r\n        const newFoodItems = [...foodItems]\r\n        newFoodItems.splice(removeIdx, 1)\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handlePer100gSlideValueChange(event){\r\n        const {name, value, id} = event.target\r\n\r\n        if(value[value.length - 1] === '-') return\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            // would not work with !==\r\n            if(id != foodItem.id) return foodItem\r\n        \r\n            // getting the carbohydratesPer100Grams with the name from localStorage\r\n            // if they exist set the carbohydratesPer100Grams input value\r\n            if(name === 'name'){\r\n                const prefixedKey = `${PREFIX}foodItem-${value.toLowerCase()}-carbohydratesPer100Grams`\r\n                const jsonValue = localStorage.getItem(prefixedKey)\r\n                if(jsonValue != null){\r\n                    const carbohydratesPer100Grams = JSON.parse(jsonValue)\r\n\r\n                    const per100gSlide = {...foodItem.per100gSlide, [name]:value, shouldDisplaySuggestions: false,\r\n                        carbohydratesPer100Grams: carbohydratesPer100Grams}\r\n\r\n                    return {...foodItem, per100gSlide:per100gSlide}\r\n                }\r\n            }\r\n            \r\n            // storing the carbohydratesPer100Grams with name as a key in localStorage\r\n            // storing a new foodNameSuggestion in localStorage\r\n            const isNameValid = foodItem.per100gSlide.name !== '' && foodItem.per100gSlide.name != null \r\n                                && foodItem.per100gSlide.name[0] !== '.'\r\n            if(name === 'carbohydratesPer100Grams' && isNameValid){\r\n                const prefixedKey = `${PREFIX}foodItem-${foodItem.per100gSlide.name.toLowerCase()}-carbohydratesPer100Grams`\r\n                const newFoodNameSuggestion = capitalize(foodItem.per100gSlide.name.toLowerCase())\r\n                if(value !== '') {\r\n                    // store foodItems carbohydratesPer100Grams\r\n                    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n                    // foodNameSuggestion\r\n                    addNewFoodNameSuggestionsToPer100gSlide(newFoodNameSuggestion)\r\n                } else {\r\n                    localStorage.removeItem(prefixedKey)\r\n                    // foodNameSuggestion\r\n                    deleteFoodNameSuggestionFromPer100gSlide(newFoodNameSuggestion)\r\n                }\r\n            }\r\n            const hasNameChanged = name === 'name'\r\n            const per100gSlide = {...foodItem.per100gSlide, [name]:value, shouldDisplaySuggestions: hasNameChanged}\r\n            return {...foodItem, per100gSlide:per100gSlide}\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handlePerPieceSlideValueChange(event){\r\n        const {name, value, id} = event.target\r\n\r\n        if(value[value.length - 1] === '-') return\r\n\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            // would not work with !==\r\n            if(id != foodItem.id) return foodItem\r\n        \r\n            // getting the carbohydratesPerPiece with the name from localStorage\r\n            // if they exist set the carbohydratesPerPiece input value\r\n            if(name === 'name'){\r\n                const prefixedKey = `${PREFIX}foodItem-${value.toLowerCase()}-carbohydratesPerPiece`\r\n                const jsonValue = localStorage.getItem(prefixedKey)\r\n                if(jsonValue != null){\r\n                    const carbohydratesPerPiece = JSON.parse(jsonValue)\r\n\r\n                    const perPieceSlide = {...foodItem.perPieceSlide, [name]:value, shouldDisplaySuggestions: false,\r\n                        carbohydratesPerPiece: carbohydratesPerPiece}\r\n\r\n                    return {...foodItem, perPieceSlide:perPieceSlide}\r\n                }\r\n            }\r\n            \r\n            // storing the carbohydratesPerPiece with name as a key in localStorage\r\n            // storing a new foodNameSuggestion in localStorage\r\n            const isNameValid = foodItem.perPieceSlide.name !== '' && foodItem.perPieceSlide.name != null \r\n                                && foodItem.perPieceSlide.name[0] !== '.'\r\n            if(name === 'carbohydratesPerPiece' && isNameValid){\r\n                const prefixedKey = `${PREFIX}foodItem-${foodItem.perPieceSlide.name.toLowerCase()}-carbohydratesPerPiece`\r\n                const newFoodNameSuggestion = capitalize(foodItem.perPieceSlide.name.toLowerCase())\r\n                if(value !== '') {\r\n                    // store foodItems carbohydratesPerPiece\r\n                    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n                    // foodNameSuggestion\r\n                    addNewFoodNameSuggestionsToPerPieceSlide(newFoodNameSuggestion)\r\n                } else {\r\n                    localStorage.removeItem(prefixedKey)\r\n                    // foodNameSuggestion\r\n                    deleteFoodNameSuggestionFromPerPieceSlide(newFoodNameSuggestion)\r\n                }\r\n            }\r\n            const hasNameChanged = name === 'name'\r\n            const perPieceSlide = {...foodItem.perPieceSlide, [name]:value, shouldDisplaySuggestions: hasNameChanged}\r\n            return {...foodItem, perPieceSlide:perPieceSlide}\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handleIsIntermealChange(id, activeSlideIdx){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id == foodItem.id){\r\n                if(activeSlideIdx === 1){\r\n                    const per100gSlide = {...foodItem.per100gSlide, isIntermeal: !foodItem.per100gSlide.isIntermeal}\r\n                    return {...foodItem, per100gSlide:per100gSlide}\r\n                } else {\r\n                    const perPieceSlide = {...foodItem.perPieceSlide, isIntermeal: !foodItem.perPieceSlide.isIntermeal}\r\n                    return {...foodItem, perPieceSlide:perPieceSlide}\r\n                }\r\n            }\r\n                \r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function toNumberFormat(string){\r\n        if(typeof string !== 'string') return -1\r\n\r\n        let stringCopy = string.slice()\r\n        stringCopy = stringCopy.replace(',', '.')\r\n        const number = parseFloat(stringCopy)\r\n        return Number.isNaN(number) ? -1 : number\r\n    }\r\n\r\n    function calculateIE(shouldScroll = true, shouldDisplayError = true){\r\n        const ERROR_MESSAGE = 'ein oder mehrere Werte sind nicht gültig'\r\n\r\n        function areItemsTypeofNumber(...items){\r\n            /* for(const item of items)\r\n                if(toNumberFormat(item) === -1) return false\r\n            return true */\r\n            return items.every(item => toNumberFormat(item) !== -1)\r\n        }\r\n\r\n        function calculateKE(foodItem){\r\n            if(foodItem.isPer100gSlideActive){\r\n                const grams = foodItem.per100gSlide.grams\r\n                const carbohydratesPer100Grams = foodItem.per100gSlide.carbohydratesPer100Grams\r\n\r\n                if(!areItemsTypeofNumber(grams, carbohydratesPer100Grams)) {\r\n                    if(shouldDisplayError)\r\n                        alert(ERROR_MESSAGE)\r\n                    return 0\r\n                }\r\n\r\n                return (toNumberFormat(grams) * (toNumberFormat(carbohydratesPer100Grams) / 100)) / 10\r\n            } else {\r\n                const numberOfPieces = foodItem.perPieceSlide.numberOfPieces\r\n                const carbohydratesPerPiece = foodItem.perPieceSlide.carbohydratesPerPiece\r\n                \r\n                if(!areItemsTypeofNumber(numberOfPieces, carbohydratesPerPiece)) {\r\n                    if(shouldDisplayError)\r\n                        alert(ERROR_MESSAGE)\r\n                    return 0\r\n                }\r\n\r\n                return toNumberFormat(numberOfPieces) * toNumberFormat(carbohydratesPerPiece) / 10\r\n            }\r\n        }\r\n\r\n        function calculateCorrectionInsulin(bloodSugar, targetBloodSugar, correctionFactor){\r\n            if(!areItemsTypeofNumber(bloodSugar, targetBloodSugar, correctionFactor)){\r\n                if(bloodSugar !== '' && shouldDisplayError)\r\n                    alert(ERROR_MESSAGE)\r\n                return 0\r\n            }\r\n            const correctionInsulin = (toNumberFormat(bloodSugar) - toNumberFormat(targetBloodSugar)) /\r\n                toNumberFormat(correctionFactor)\r\n            return correctionInsulin\r\n        }\r\n\r\n        // correction insulin\r\n        const correctionInsulin = calculateCorrectionInsulin(bloodSugar, targetBloodSugar, correctionFactor)\r\n        setTotalCorrectionInsulin(Math.round(correctionInsulin * 10) / 10)\r\n\r\n        // total KE | totalIntermealKE\r\n        let KE = 0, intermealKE = 0\r\n        for(const foodItem of foodItems){\r\n            const foodItemKE = calculateKE(foodItem)\r\n            KE += foodItemKE\r\n            if(foodItem.isPer100gSlideActive)\r\n                intermealKE += foodItem.per100gSlide.isIntermeal ? foodItemKE : 0\r\n            else\r\n                intermealKE += foodItem.perPieceSlide.isIntermeal ? foodItemKE : 0\r\n        }\r\n        setTotalKE(Math.round(KE * 10) / 10)\r\n        setTotalIntermealKE(Math.round(intermealKE * 10) / 10)\r\n        setTotalMainMealKE(Math.round((KE - intermealKE) * 10) / 10)\r\n        \r\n        // total IE\r\n        if(!areItemsTypeofNumber(carbohydrateFactor)) {\r\n            if(shouldDisplayError)\r\n                alert(ERROR_MESSAGE)\r\n            return -1\r\n        }\r\n\r\n        let IE = KE * toNumberFormat(carbohydrateFactor)\r\n        IE += correctionInsulin\r\n        IE = Math.round(IE * 10) / 10\r\n\r\n        setTotalIE(IE)\r\n\r\n        // needed because of async state setting\r\n        if(shouldScroll)\r\n            setTimeout(() => {\r\n                outputRef.current.scrollIntoView({smooth:true})\r\n            }, 5)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            {hasRerenderedSince60sec = true}\r\n            \r\n            <h1>Insulin Rechner</h1>\r\n            <p>\r\n                <button\r\n                    className='clear-data-button space-around'\r\n                    onClick = {clearData}\r\n                    >Daten löschen</button>\r\n\r\n                <button\r\n                    className='load-data-button'\r\n                    onClick = {loadData}\r\n                >Daten laden</button>\r\n            </p>\r\n\r\n            <hr className='destop-hr new-section-hr'/>\r\n\r\n            <FixedInformationSection \r\n                setBloodSugar={setBloodSugar}\r\n                setTargetBloodSugar={setTargetBloodSugar}\r\n                setCorrectionFactor={setCorrectionFactor}\r\n                setCarbohydrateFactor={setCarbohydrateFactor}\r\n                bloodSugar={bloodSugar}\r\n                targetBloodSugar={targetBloodSugar}\r\n                correctionFactor={correctionFactor}\r\n                carbohydrateFactor={carbohydrateFactor}\r\n            />\r\n\r\n            <hr className='destop-hr new-section-hr'/>\r\n\r\n            <ListSection \r\n                foodItems={foodItems}\r\n                foodNameSuggestionsForPer100gSlide={foodNameSuggestionsForPer100gSlide}\r\n                foodNameSuggestionsForPerPieceSlide={foodNameSuggestionsForPerPieceSlide}\r\n                addNewFoodItem={addNewFoodItem}\r\n                handleIsIntermealChange={handleIsIntermealChange}\r\n                handlePer100gSlideValueChange={handlePer100gSlideValueChange}\r\n                handlePerPieceSlideValueChange={handlePerPieceSlideValueChange}\r\n                deleteFoodItem={deleteFoodItem}\r\n                handleSuggestionClick={handleSuggestionClick}\r\n                handleSlideChange={handleSlideChange}\r\n            />\r\n\r\n            <p style={{marginBottom:'20px'}}>\r\n                <button\r\n                    className='save-data-button space-around'\r\n                    onClick = {saveData}\r\n                >Daten speichen</button>\r\n\r\n                <button \r\n                    className='calculateIE-button'\r\n                    onClick={calculateIE}\r\n                >Berechne IE</button>\r\n            </p>\r\n\r\n            <Output \r\n                totalIE={totalIE}\r\n                totalMainMealKE={totalMainMealKE}\r\n                totalIntermealKE={totalIntermealKE}\r\n                totalKE={totalKE}\r\n                totalCorrectionInsulin={totalCorrectionInsulin}\r\n                outputRef={outputRef}\r\n            />\r\n        </div>  \r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from \"react-dom\"\r\n\r\nimport App from './App.js'\r\n\r\nReactDOM.render(\r\n    <App />, \r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}