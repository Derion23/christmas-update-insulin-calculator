{"version":3,"sources":["Components/Input.js","Components/FixedInformationSection.js","Components/FoodItem.js","Components/ListSection.js","Components/Output.js","hooks/useLocalStorage.js","App.js","index.js"],"names":["Input","id","name","value","onChange","description","placeholder","unit","event","FixedInformationSection","setBloodSugar","setTargetBloodSugar","setCorrectionFactor","setCarbohydrateFactor","bloodSugar","targetBloodSugar","correctionFactor","carbohydrateFactor","toString","target","FoodItem","grams","carbohydratesPer100Grams","handleChange","deleteFoodItem","className","onClick","ListSection","foodItems","addNewFoodItem","map","element","key","Output","useLocalStorage","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","setFoodItems","totalIE","setTotalIE","newFoodItems","Math","random","foodItem","removeIdx","idx","length","splice","ERROR_MESSAGE","toNumberFormat","string","stringCopy","slice","replace","number","parseFloat","Number","isNaN","areItemsTypeofNumber","items","item","calculateKE","alert","correctionInsulin","calculateCorrectionInsuline","totalKE","IE","round","undefined","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.52a6caad.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Input({id, name='',value='', onChange='', description='', placeholder='', unit=''}) {\r\n    return (\r\n        <div>\r\n            <label>\r\n                {description}\r\n            </label>\r\n            <input\r\n                id={id}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange === '' ? () => 0 : (event) => onChange(event)}\r\n            ></input>\r\n            <label>\r\n                {unit}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport Input from './Input'\r\n\r\nexport default function FixedInformationSection(\r\n    {setBloodSugar, \r\n    setTargetBloodSugar, \r\n    setCorrectionFactor,\r\n    setCarbohydrateFactor,\r\n    bloodSugar, \r\n    targetBloodSugar, \r\n    correctionFactor, \r\n    carbohydrateFactor\r\n    }) {\r\n    \r\n    return (\r\n        <div>\r\n            <Input \r\n                name = 'BloodSugar'\r\n                value = {bloodSugar.toString()}\r\n                description = 'Blutzucker'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'TargetBloodSugar'\r\n                value = {targetBloodSugar}\r\n                description = 'Blutzucker Zielwert'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setTargetBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CorrectionFactor'\r\n                value = {correctionFactor}\r\n                description = 'Korrektur-Faktor'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setCorrectionFactor(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CarbohydrateFactor'\r\n                value = {carbohydrateFactor}\r\n                description = 'KE-Faktor'\r\n                onChange = {(event) => setCarbohydrateFactor(event.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport Input from './Input'\r\n\r\nexport default function FoodItem({id, name='', grams='', carbohydratesPer100Grams ='', handleChange, deleteFoodItem}) {\r\n    return (\r\n        <div>\r\n            <button\r\n                className = 'delete-food-item-button'\r\n                onClick={() => deleteFoodItem(id)}\r\n            >x</button>\r\n            <Input \r\n                id = {id}\r\n                name = {'name'}\r\n                description = {'Name'}\r\n                value = {name}\r\n                onChange = {(event) => handleChange(event)}\r\n            />\r\n            <Input\r\n                id = {id}\r\n                name = {'grams'}\r\n                description = 'Gramm'\r\n                value={grams}\r\n                onChange = {(event) => handleChange(event)}\r\n            />\r\n            <Input\r\n                id = {id}\r\n                name = {'carbohydratesPer100Grams'}\r\n                description = 'Kohlenhydrate pro 100g'\r\n                value={carbohydratesPer100Grams}\r\n                onChange = {(event) => handleChange(event)}\r\n            />\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport FoodItem from './FoodItem'\r\n\r\nexport default function ListSection({foodItems=[], addNewFoodItem, handleChange, deleteFoodItem}) {\r\n    return (\r\n        <div>\r\n            <h3>Elemente</h3>\r\n\r\n            {foodItems.map(element => \r\n                <FoodItem \r\n                    key={element.key}\r\n                    id={element.id}\r\n                    name={element.name}\r\n                    grams={element.grams}\r\n                    carbohydratesPer100Grams={element.carbohydratesPer100Grams}\r\n                    handleChange={handleChange}\r\n                    deleteFoodItem={deleteFoodItem}\r\n             />)}\r\n             \r\n            <button \r\n                className='add-new-food-item-button'\r\n                onClick={() => addNewFoodItem()}\r\n            >+</button>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Output() {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    // get value\r\n    const prefixedKey = PREFIX + key\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if(jsonValue != null) return JSON.parse(jsonValue)\r\n        if(typeof initialValue === \"function\"){\r\n            return initialValue()\r\n        } else{\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    // save value\r\n    useEffect(() =>{\r\n        if(value != null)\r\n            localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [prefixedKey, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import React, {useState} from 'react'\r\nimport \"./style.css\"\r\n\r\nimport FixedInformationSection from './Components/FixedInformationSection'\r\nimport ListSection from './Components/ListSection'\r\nimport Output from './Components/Output.js'\r\nimport useLocalStorage from './hooks/useLocalStorage.js'\r\nimport FoodItem from './Components/FoodItem'\r\n\r\nexport default function App() {\r\n    const [bloodSugar, setBloodSugar] = useState('')\r\n    const [targetBloodSugar, setTargetBloodSugar] = useLocalStorage('targetBloodSugar')\r\n    const [correctionFactor, setCorrectionFactor] = useLocalStorage('correctionFactor')\r\n    const [carbohydrateFactor, setCarbohydrateFactor] = useLocalStorage('carbohydrateFactor')\r\n\r\n    const [foodItems, setFoodItems] = useState([])\r\n    const [totalIE, setTotalIE] = useState('')\r\n\r\n    function addNewFoodItem(){\r\n        const newFoodItems = [...foodItems, {\r\n            key:Math.random(),\r\n            id:Math.random(),\r\n            name:'',\r\n            grams:'',\r\n            carbohydratesPer100Grams:''\r\n        }]\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function deleteFoodItem(id){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodItems.length; idx++){\r\n            if(id == foodItems[idx].id){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n\r\n        const newFoodItems = [...foodItems]\r\n        newFoodItems.splice(removeIdx, 1)\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handleChange(event){\r\n        const {name, value, id} = event.target\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id == foodItem.id){\r\n                return {...foodItem, [name]:value}\r\n            }\r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function calculateIE(){\r\n        const ERROR_MESSAGE = 'ein oder mehrere Werte sind nicht gültig'\r\n\r\n        function toNumberFormat(string){\r\n            let stringCopy = string.slice()\r\n            stringCopy = stringCopy.replace(',', '.')\r\n            const number = parseFloat(stringCopy)\r\n            return Number.isNaN(number) ? -1 : number\r\n        }\r\n\r\n        function areItemsTypeofNumber(...items){\r\n            for(const item of items)\r\n                if(toNumberFormat(item) === -1) return false\r\n            return true\r\n        }\r\n\r\n        function calculateKE(foodItem){\r\n            if(!areItemsTypeofNumber(foodItem.grams, foodItem.carbohydratesPer100Grams)) {\r\n                alert(ERROR_MESSAGE)\r\n                return 0\r\n            }\r\n\r\n            return (foodItem.grams * (foodItem.carbohydratesPer100Grams / 100)) / 10\r\n        }\r\n\r\n        function calculateCorrectionInsuline(bloodSugar, targetBloodSugar, correctionFactor){\r\n            if(!areItemsTypeofNumber(bloodSugar, targetBloodSugar, correctionFactor)){\r\n                if(bloodSugar !== '')\r\n                    alert(ERROR_MESSAGE)\r\n                return 0\r\n            }\r\n            const correctionInsulin = (toNumberFormat(bloodSugar) - toNumberFormat(targetBloodSugar)) /\r\n                toNumberFormat(correctionFactor)\r\n            return correctionInsulin\r\n        }\r\n\r\n        const correctionInsulin = calculateCorrectionInsuline(bloodSugar, targetBloodSugar, correctionFactor)\r\n        let totalKE = 0\r\n        for(const foodItem of foodItems)\r\n            totalKE += calculateKE(foodItem)\r\n        \r\n        if(!areItemsTypeofNumber(carbohydrateFactor)) {\r\n            alert(ERROR_MESSAGE)\r\n            return -1\r\n        }\r\n\r\n        let IE = totalKE * toNumberFormat(carbohydrateFactor)\r\n        IE += correctionInsulin\r\n        IE = Math.round(IE * 10) / 10\r\n\r\n        setTotalIE(IE)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <h1>Insulin Rechner</h1>\r\n\r\n            <FixedInformationSection \r\n                setBloodSugar={setBloodSugar}\r\n                setTargetBloodSugar={setTargetBloodSugar}\r\n                setCorrectionFactor={setCorrectionFactor}\r\n                setCarbohydrateFactor={setCarbohydrateFactor}\r\n                bloodSugar={bloodSugar}\r\n                targetBloodSugar={targetBloodSugar}\r\n                correctionFactor={correctionFactor}\r\n                carbohydrateFactor={carbohydrateFactor}\r\n            />\r\n            <ListSection \r\n                foodItems={foodItems}\r\n                addNewFoodItem={addNewFoodItem}\r\n                handleChange={handleChange}\r\n                deleteFoodItem={deleteFoodItem}\r\n            />\r\n            <Output />\r\n            {/* <button>berechne KE</button> */}\r\n            <button \r\n                onClick={calculateIE}\r\n            >berechne IE</button>\r\n            <p>\r\n                <h3> {!(totalIE === '' || \r\n                totalIE == undefined ||\r\n                totalIE <= 0\r\n                ) ? `Du musst dir ${totalIE} IE spritzen` : ''}</h3>\r\n            </p>\r\n        </div>  \r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from \"react-dom\"\r\n\r\nimport App from './App.js'\r\n\r\nReactDOM.render(\r\n    <App />, \r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}