{"version":3,"sources":["Components/Input.js","Components/FixedInformationSection.js","Components/Suggestion.js","Components/SuggestionList.js","Components/FoodItem.js","Components/ListSection.js","Components/Output.js","hooks/useLocalStorage.js","App.js","index.js"],"names":["Input","id","type","name","value","onChange","description","placeholder","unit","autoComplete","event","FixedInformationSection","setBloodSugar","setTargetBloodSugar","setCorrectionFactor","setCarbohydrateFactor","bloodSugar","targetBloodSugar","correctionFactor","carbohydrateFactor","className","toString","target","Suggestion","suggestionText","handleSuggestionClick","onClick","SuggestionList","allSuggestions","searchingText","matchingSuggestions","filter","slice","length","toLowerCase","map","key","Math","random","FoodItem","slide1","activeSlideIdx","slide2","foodNameSuggestions","handleIsIntermealChange","handleSlide1ValueChange","handleSlide2ValueChange","deleteFoodItem","slide1Html","handleSlideChange","checked","isIntermeal","shouldDisplaySuggestions","grams","carbohydratesPer100Grams","numberOfPieces","carbohydratesPerPiece","ListSection","foodItems","addNewFoodItem","element","Output","totalIE","totalMainMealKE","totalIntermealKE","totalKE","totalCorrectionInsulin","outputRef","ref","undefined","style","fontWeight","SwiperCore","use","Pagination","useLocalStorage","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","PREFIX","hasRerenderedSince60sec","App","lastSavedData","setLastSavedData","setFoodNameSuggestions","getCurrentDayTime","setFoodItems","setTotalIE","setTotalKE","setTotalCorrectionInsulin","setTotalIntermealKE","setTotalMainMealKE","useRef","capitalize","string","toUpperCase","Date","toLocaleTimeString","split","hours","minutes","time","toNumberFormat","newFoodItems","foodItem","isNameValid","newFoodNameSuggestion","toAddFoodNameSuggestions","newFoodNameSuggestions","Array","isArray","NewFoodNameSuggestion","some","foodNameSuggestion","addNewFoodNameSuggestions","removeItem","toDeleteFoodNameSuggestion","removeIdx","idx","splice","deleteFoodNameSuggestion","hasNameChanged","stringCopy","replace","number","parseFloat","Number","isNaN","calculateIE","shouldScroll","shouldDisplayError","ERROR_MESSAGE","areItemsTypeofNumber","items","every","item","calculateKE","alert","calculateCorrectionInsulin","correctionInsulin","round","KE","intermealKE","foodItemKE","IE","setTimeout","current","scrollIntoView","smooth","setInterval","window","location","reload","marginBottom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a7bcf2b8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Input(\r\n    {id, type='text', name='',value='', onChange='', description='', placeholder='', unit=''}) {\r\n    return (\r\n        <div>\r\n            <label> \r\n                {description}\r\n            </label>\r\n            <br />\r\n            <input\r\n                type={type}\r\n                autoComplete='off'\r\n                id={id}\r\n                name={name}\r\n                placeholder={placeholder}\r\n                value={value}\r\n                onChange={onChange === '' ? () => 0 : (event) => onChange(event)}\r\n            ></input>\r\n            <label>\r\n                {unit}\r\n            </label>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\n\r\nexport default function FixedInformationSection(\r\n    {setBloodSugar, \r\n    setTargetBloodSugar, \r\n    setCorrectionFactor,\r\n    setCarbohydrateFactor,\r\n    bloodSugar, \r\n    targetBloodSugar, \r\n    correctionFactor, \r\n    carbohydrateFactor\r\n    }) {\r\n    \r\n    return (\r\n        <div className='space-around'>\r\n            <Input \r\n                name = 'BloodSugar'\r\n                value = {bloodSugar.toString()}\r\n                description = 'Blutzucker'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'TargetBloodSugar'\r\n                value = {targetBloodSugar}\r\n                description = 'Blutzucker Zielwert'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setTargetBloodSugar(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CorrectionFactor'\r\n                value = {correctionFactor}\r\n                description = 'Korrektur-Faktor'\r\n                unit = 'mg/dl'\r\n                onChange = {(event) => setCorrectionFactor(event.target.value)}\r\n            />\r\n            <Input \r\n                name = 'CarbohydrateFactor'\r\n                value = {carbohydrateFactor}\r\n                description = 'KE-Faktor'\r\n                onChange = {(event) => setCarbohydrateFactor(event.target.value)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Suggestion({suggestionText, handleSuggestionClick}) {\r\n    return (\r\n        <li\r\n            onClick={() => handleSuggestionClick(suggestionText)}\r\n        >\r\n            {suggestionText}\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport Suggestion from './Suggestion.js'\r\n\r\nexport default function SuggestionList({allSuggestions, searchingText, handleSuggestionClick}) {\r\n    \r\n    const matchingSuggestions = searchingText === '' ? [] : allSuggestions.filter(suggestionText => {\r\n        const potentialMatch = suggestionText.slice(0, searchingText.length)\r\n        return potentialMatch.toLowerCase() === searchingText.toLowerCase()\r\n    })\r\n    \r\n    return (\r\n        <div>\r\n            {matchingSuggestions.length !== 0 && <ul className='suggestion-list'>\r\n                {matchingSuggestions.map(suggestionText => <Suggestion \r\n                    key={Math.random()} \r\n                    suggestionText={suggestionText} \r\n                    handleSuggestionClick={handleSuggestionClick}\r\n                />)}\r\n            </ul>}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Swiper, SwiperSlide} from 'swiper/react'\r\nimport SwiperCore, {Pagination} from 'swiper'\r\nimport 'swiper/swiper-bundle.min.css'\r\n\r\nimport '../css/style.css'\r\nimport Input from './Input'\r\nimport SuggestionList from './SuggestionList.js'\r\n\r\nSwiperCore.use([Pagination])\r\n\r\nexport default function FoodItem(\r\n    {id, \r\n    activeSlideIdx,\r\n    slide1,\r\n    slide2,\r\n\r\n    foodNameSuggestions,\r\n    handleIsIntermealChange, \r\n    handleSlide1ValueChange,\r\n    handleSlide2ValueChange,\r\n    deleteFoodItem,\r\n    handleSuggestionClick,\r\n    handleSlideChange\r\n    }) {\r\n\r\n    const slide1Html = \r\n    <>\r\n        <label className='intermeal-checkbox'>\r\n                <input\r\n                    type = 'checkbox'\r\n                    checked = {slide1.isIntermeal}\r\n                    onChange = {() => handleIsIntermealChange(id, 1)}\r\n                ></input> ZM?\r\n        </label>\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'name'\r\n            description = 'Name'\r\n            value = {slide1.name}\r\n            onChange = {(event) => handleSlide1ValueChange(event)}\r\n        />\r\n        {slide1.shouldDisplaySuggestions && <SuggestionList \r\n            allSuggestions={foodNameSuggestions}\r\n            searchingText={slide1.name}\r\n            handleSuggestionClick={(suggestionText) => handleSuggestionClick(suggestionText, id)}\r\n        />}\r\n\r\n        <Input\r\n            id = {id}\r\n            name = 'grams'\r\n            type='number'\r\n            description = 'Gramm'\r\n            value = {slide1.grams}\r\n            onChange = {(event) => handleSlide1ValueChange(event)}\r\n        />\r\n        <Input\r\n            id = {id}\r\n            name = 'carbohydratesPer100Grams'\r\n            type='number'\r\n            description = 'Kohlenhydrate pro 100g'\r\n            value = {slide1.carbohydratesPer100Grams}\r\n            onChange = {(event) => handleSlide1ValueChange(event)}\r\n        />\r\n    </>\r\n\r\n    const slide2Html = \r\n    <>\r\n         <label className='intermeal-checkbox'>\r\n                <input\r\n                    type = 'checkbox'\r\n                    checked = {slide2.isIntermeal}\r\n                    onChange = {() => handleIsIntermealChange(id, 2)}\r\n                ></input> ZM?\r\n        </label>\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'name'\r\n            description = 'Name'\r\n            value = {slide2.name}\r\n            onChange = {(event) => handleSlide2ValueChange(event)}\r\n        />\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'numberOfPieces'\r\n            type='number'\r\n            description = 'Anzahl'\r\n            value = {slide2.numberOfPieces}\r\n            onChange = {(event) => handleSlide2ValueChange(event)}\r\n        />\r\n\r\n        <Input \r\n            id = {id}\r\n            name = 'carbohydratesPerPiece'\r\n            type='number'\r\n            description = 'Kohlenhydrate pro Stück'\r\n            value = {slide2.carbohydratesPerPiece}\r\n            onChange = {(event) => handleSlide2ValueChange(event)}\r\n        />\r\n    </>\r\n\r\n    const slides = [slide1Html, slide2Html]\r\n\r\n    return (\r\n        <div>\r\n            <div className='space-around'>\r\n                <button\r\n                    className = 'delete-food-item-button'\r\n                    onClick={() => deleteFoodItem(id)}\r\n                ></button>\r\n\r\n                {slide1Html}\r\n                {/*  <Swiper \r\n                    id='main'\r\n                    tag='section'\r\n                    wrapperTag='ul'\r\n                    pagination={{clickable:true}}\r\n                    onSlideChange={(swiper) => handleSlideChange(id, swiper.activeIndex)}\r\n                    >\r\n                    {slides.map((slide, idx) => (\r\n                        <SwiperSlide \r\n                            key={idx}\r\n                            tag='li'\r\n                            style= {{ listStyle: 'none' }}\r\n                            >\r\n                            {slide}\r\n                        </SwiperSlide>\r\n                    ))}\r\n                    \r\n                </Swiper> */}\r\n\r\n            </div>\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\nimport FoodItem from './FoodItem'\r\n\r\nexport default function ListSection(\r\n    {foodItems=[], \r\n    foodNameSuggestions=[],\r\n    addNewFoodItem, \r\n    handleIsIntermealChange, \r\n    handleSlide1ValueChange, \r\n    handleSlide2ValueChange, \r\n    deleteFoodItem,\r\n    handleSuggestionClick,\r\n    handleSlideChange\r\n    }) {\r\n    return (\r\n        <div>\r\n            <h3>Elemente</h3>\r\n            {foodItems.map(element => \r\n                <FoodItem \r\n                    key={element.key}\r\n                    id={element.id}\r\n                    activeSlideIdx={element.activeSlideIdx}\r\n                    slide1={element.slide1}\r\n                    slide2={element.slide2}\r\n                    \r\n                    foodNameSuggestions={foodNameSuggestions}\r\n                    handleIsIntermealChange={handleIsIntermealChange}\r\n                    handleSlide1ValueChange={handleSlide1ValueChange}\r\n                    handleSlide2ValueChange={handleSlide2ValueChange}\r\n                    deleteFoodItem={deleteFoodItem}\r\n                    handleSuggestionClick={handleSuggestionClick}\r\n                    handleSlideChange={handleSlideChange}\r\n             />)}\r\n             \r\n            <p>\r\n                <button \r\n                    className='add-new-food-item-button'\r\n                    onClick={() => addNewFoodItem()}\r\n                ></button>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport '../css/style.css'\r\n\r\nexport default function Output(\r\n    {totalIE, totalMainMealKE, totalIntermealKE, totalKE, totalCorrectionInsulin, outputRef}) {\r\n    return (\r\n        <div ref={outputRef}>\r\n            {!(totalIE === '' || totalIE == undefined || totalIE <= 0) ? \r\n                <div>\r\n                    <hr />\r\n\r\n                    <div className='space-around'>\r\n                        \r\n                        <p className='output' >\r\n                            Hauptmahlzeit-KE : {totalMainMealKE} KE <br />\r\n                            Zwischenmahlzeit-KE : {totalIntermealKE} KE <br />\r\n                            Gesamt-KE: {totalKE} KE <br />\r\n                            <br />\r\n                            Korrektur-Insulin: {totalCorrectionInsulin} IE  <br />\r\n                            <span style={{fontWeight: 'bold'}}> Gesamt-Insulin: {totalIE} IE </span>\r\n                        </p>\r\n                            \r\n                    </div>\r\n                </div>\r\n            : ''}\r\n        </div>\r\n    )\r\n}\r\n","import {useEffect, useState} from 'react'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n    // get value\r\n    const prefixedKey = PREFIX + key\r\n    const [value, setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if(jsonValue != null) return JSON.parse(jsonValue)\r\n        if(typeof initialValue === \"function\"){\r\n            return initialValue()\r\n        } else{\r\n            return initialValue\r\n        }\r\n    })\r\n\r\n    // save value\r\n    useEffect(() =>{\r\n        if(value != null)\r\n            localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n    }, [prefixedKey, value])\r\n\r\n    return [value, setValue]\r\n}\r\n","import React, {useState, useRef, useEffect} from 'react'\r\n\r\n\r\nimport './css/style.css'\r\nimport FixedInformationSection from './Components/FixedInformationSection'\r\nimport ListSection from './Components/ListSection'\r\nimport Output from './Components/Output.js'\r\n\r\nimport useLocalStorage from './hooks/useLocalStorage.js'\r\n\r\nconst PREFIX = \"insulin-calculator-\"\r\n\r\nlet hasRerenderedSince60sec = false\r\n\r\nexport default function App() {\r\n    const [lastSavedData, setLastSavedData] = useLocalStorage('lastSavedData')\r\n    const [foodNameSuggestions, setFoodNameSuggestions] = useLocalStorage('foodNameSuggestions', [])\r\n\r\n    const [bloodSugar, setBloodSugar] = useState('')\r\n    const [targetBloodSugar, setTargetBloodSugar] = useLocalStorage(`${getCurrentDayTime()}-targetBloodSugar`)\r\n    const [correctionFactor, setCorrectionFactor] = useLocalStorage(`${getCurrentDayTime()}-correctionFactor`)\r\n    const [carbohydrateFactor, setCarbohydrateFactor] = useLocalStorage(`${getCurrentDayTime()}-carbohydrateFactor`)\r\n\r\n    const [foodItems, setFoodItems] = useLocalStorage('foodItems', [])\r\n\r\n    const [totalIE, setTotalIE] = useState('')\r\n    const [totalKE, setTotalKE] = useState('')\r\n    const [totalCorrectionInsulin, setTotalCorrectionInsulin] = useState('')\r\n    const [totalIntermealKE, setTotalIntermealKE] = useState('')\r\n    const [totalMainMealKE, setTotalMainMealKE] = useState('')\r\n\r\n    const outputRef = useRef()\r\n\r\n    useEffect(() => {\r\n        calculateIE(false, false)\r\n\r\n        // update every minute\r\n        setInterval(() => {\r\n            if(!hasRerenderedSince60sec)\r\n                refreshPage()\r\n            else\r\n                hasRerenderedSince60sec = false\r\n            \r\n        }, 60000);\r\n    }, [])\r\n\r\n\r\n    function refreshPage(){\r\n        window.location.reload();\r\n    }\r\n\r\n    function handleSlideChange(id, activeSlideIdx){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id == foodItem.id){\r\n                const slide1 = {...foodItem.slide1}\r\n                const slide2 = {...foodItem.slide2}\r\n                return {...foodItem, slide1:slide1, slide2:slide2, activeSlideIdx: activeSlideIdx + 1}\r\n            }\r\n            \r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)   \r\n    }\r\n\r\n    function capitalize(string){\r\n        if(typeof string !== 'string') return ''\r\n        const capitalizedString = `${string[0].toUpperCase()}${string.slice(1)}`\r\n        return capitalizedString\r\n    }\r\n\r\n    function addNewFoodNameSuggestions(toAddFoodNameSuggestions){\r\n        let newFoodNameSuggestions = toAddFoodNameSuggestions\r\n\r\n        if(!Array.isArray(toAddFoodNameSuggestions)) newFoodNameSuggestions = [toAddFoodNameSuggestions]\r\n\r\n        newFoodNameSuggestions = newFoodNameSuggestions.filter(NewFoodNameSuggestion => {\r\n            const isAlreadyExisting = foodNameSuggestions.some(foodNameSuggestion => \r\n                NewFoodNameSuggestion === foodNameSuggestion)\r\n            return !isAlreadyExisting\r\n        })\r\n        if(newFoodNameSuggestions.length === 0) return\r\n\r\n        newFoodNameSuggestions = [...foodNameSuggestions, ...newFoodNameSuggestions]\r\n        setFoodNameSuggestions(newFoodNameSuggestions)\r\n    }\r\n\r\n    function deleteFoodNameSuggestion(toDeleteFoodNameSuggestion){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodNameSuggestions.length; idx++){\r\n            if(toDeleteFoodNameSuggestion === foodNameSuggestions[idx]){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n        if(removeIdx == null) return\r\n\r\n        const newFoodNameSuggestions = [...foodNameSuggestions]\r\n        newFoodNameSuggestions.splice(removeIdx, 1)\r\n        setFoodNameSuggestions(newFoodNameSuggestions)\r\n    }\r\n\r\n    function clearData(){\r\n        setFoodItems([])\r\n        setTotalIE(0)\r\n    }\r\n   \r\n    function saveData(){\r\n        const newData = {\r\n            foodItems: foodItems\r\n        }\r\n        setLastSavedData(newData)\r\n    }\r\n\r\n    function loadData(){\r\n        if(lastSavedData == null) return\r\n        const {foodItems} = lastSavedData\r\n\r\n        setFoodItems(foodItems)\r\n\r\n        setTimeout(() => {\r\n            calculateIE(false, false)\r\n        }, 100)\r\n    }\r\n\r\n    function handleSuggestionClick(suggestionText, id){\r\n        const event = {target:{name:'name', value:suggestionText, id:id}}\r\n        handleSlide1ValueChange(event)\r\n    }\r\n\r\n    function getCurrentDayTime(){\r\n         const [hours, minutes] = new Date().toLocaleTimeString().split(':')\r\n        const time =  toNumberFormat(hours) + (toNumberFormat(minutes) / 60)\r\n        let dayTime = ''\r\n        \r\n        if(time <= 11.5){\r\n            dayTime = 'morning'\r\n        } else if(time <= 16){\r\n            dayTime = 'midday'\r\n        } else {\r\n            dayTime = 'evening'\r\n        }\r\n\r\n        /* if(time < 21.9)\r\n            dayTime = 'midday'\r\n        else\r\n            dayTime = 'evening' */\r\n\r\n        return dayTime\r\n    }\r\n\r\n    function addNewFoodItem(){\r\n        const id = Math.random()\r\n        const newFoodItems = [...foodItems, {\r\n            key: Math.random(),\r\n            id: id,\r\n            activeSlideIdx: 1,\r\n            slide1: {\r\n                name: '',\r\n                grams: '',\r\n                carbohydratesPer100Grams: '',\r\n                isIntermeal: false,\r\n                shouldDisplaySuggestions: true\r\n            },\r\n            slide2: {\r\n                name: '',\r\n                numberOfPieces: '',\r\n                carbohydratesPerPiece: '',\r\n                isIntermeal: false,\r\n                shouldDisplaySuggestions: true\r\n            }\r\n        }]\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function deleteFoodItem(id){\r\n        let removeIdx\r\n        for(let idx = 0; idx < foodItems.length; idx++){\r\n            if(id == foodItems[idx].id){\r\n                removeIdx = idx\r\n                break\r\n            }\r\n        }\r\n\r\n        const newFoodItems = [...foodItems]\r\n        newFoodItems.splice(removeIdx, 1)\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handleSlide1ValueChange(event){\r\n        const {name, value, id} = event.target\r\n\r\n        if(value[value.length - 1] === '-') return\r\n\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            // would not work with !==\r\n            if(id != foodItem.id) return foodItem\r\n        \r\n            // getting the carbohydratesPer100Grams with the name from localStorage\r\n            // if they exist set the carbohydratesPer100Grams input value\r\n            if(name === 'name'){\r\n                const prefixedKey = `${PREFIX}foodItem-${value.toLowerCase()}-carbohydratesPer100Grams`\r\n                const jsonValue = localStorage.getItem(prefixedKey)\r\n                if(jsonValue != null){\r\n                    const carbohydratesPer100Grams = JSON.parse(jsonValue)\r\n\r\n                    const slide1 = {...foodItem.slide1, [name]:value, shouldDisplaySuggestions: false,\r\n                        carbohydratesPer100Grams: carbohydratesPer100Grams}\r\n\r\n                    return {...foodItem, slide1:slide1}\r\n                }\r\n            }\r\n            \r\n            // storing the carbohydratesPer100Grams with name as a key in localStorage\r\n            // storing a new foodNameSuggestion in localStorage\r\n            const isNameValid = foodItem.slide1.name !== '' && foodItem.slide1.name != null \r\n                                && foodItem.slide1.name[0] !== '.'\r\n            if(name === 'carbohydratesPer100Grams' && isNameValid){\r\n                const prefixedKey = `${PREFIX}foodItem-${foodItem.slide1.name.toLowerCase()}-carbohydratesPer100Grams`\r\n                const newFoodNameSuggestion = capitalize(foodItem.slide1.name.toLowerCase())\r\n                if(value !== '') {\r\n                    // store foodItems carbohydratesPer100Grams\r\n                    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n                    // foodNameSuggestion\r\n                    addNewFoodNameSuggestions(newFoodNameSuggestion)\r\n                } else {\r\n                    localStorage.removeItem(prefixedKey)\r\n                    // foodNameSuggestion\r\n                    deleteFoodNameSuggestion(newFoodNameSuggestion)\r\n                }\r\n            }\r\n            const hasNameChanged = name === 'name'\r\n            const slide1 = {...foodItem.slide1, [name]:value, shouldDisplaySuggestions: hasNameChanged}\r\n            return {...foodItem, slide1:slide1}\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handleSlide2ValueChange(event){\r\n        const {name, value, id} = event.target\r\n\r\n        if(value[value.length - 1] === '-') return\r\n\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            // would not work with !==\r\n            if(id != foodItem.id) return foodItem\r\n        \r\n            // getting the carbohydratesPerPiece with the name from localStorage\r\n            // if they exist set the carbohydratesPerPiece input value\r\n            if(name === 'name'){\r\n                const prefixedKey = `${PREFIX}foodItem-${value.toLowerCase()}-carbohydratesPerPiece`\r\n                const jsonValue = localStorage.getItem(prefixedKey)\r\n                if(jsonValue != null){\r\n                    const carbohydratesPerPiece = JSON.parse(jsonValue)\r\n\r\n                    const slide2 = {...foodItem.slide2, [name]:value, shouldDisplaySuggestions: false,\r\n                        carbohydratesPerPiece: carbohydratesPerPiece}\r\n\r\n                    return {...foodItem, slide2:slide2}\r\n                }\r\n            }\r\n            \r\n            // storing the carbohydratesPerPiece with name as a key in localStorage\r\n            // storing a new foodNameSuggestion in localStorage\r\n            const isNameValid = foodItem.slide2.name !== '' && foodItem.slide2.name != null \r\n                                && foodItem.slide2.name[0] !== '.'\r\n            if(name === 'carbohydratesPerPiece' && isNameValid){\r\n                const prefixedKey = `${PREFIX}foodItem-${foodItem.slide2.name.toLowerCase()}-carbohydratesPerPiece`\r\n                const newFoodNameSuggestion = capitalize(foodItem.slide2.name.toLowerCase())\r\n                if(value !== '') {\r\n                    // store foodItems carbohydratesPerPiece\r\n                    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n                    // foodNameSuggestion\r\n                        //addNewFoodNameSuggestions(newFoodNameSuggestion)\r\n                } else {\r\n                    localStorage.removeItem(prefixedKey)\r\n                    // foodNameSuggestion\r\n                        //deleteFoodNameSuggestion(newFoodNameSuggestion)\r\n                }\r\n            }\r\n            const hasNameChanged = name === 'name'\r\n            const slide2 = {...foodItem.slide2, [name]:value, shouldDisplaySuggestions: hasNameChanged}\r\n            return {...foodItem, slide2:slide2}\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function handleIsIntermealChange(id, activeSlideIdx){\r\n        const newFoodItems = foodItems.map(foodItem => {\r\n            if(id == foodItem.id){\r\n                if(activeSlideIdx === 1){\r\n                    const slide1 = {...foodItem.slide1, isIntermeal: !foodItem.slide1.isIntermeal}\r\n                    return {...foodItem, slide1:slide1}\r\n                } else {\r\n                    const slide2 = {...foodItem.slide2, isIntermeal: !foodItem.slide2.isIntermeal}\r\n                    return {...foodItem, slide2:slide2}\r\n                }\r\n            }\r\n                \r\n            return foodItem\r\n        })\r\n        setFoodItems(newFoodItems)\r\n    }\r\n\r\n    function toNumberFormat(string){\r\n        if(typeof string !== 'string') return -1\r\n\r\n        let stringCopy = string.slice()\r\n        stringCopy = stringCopy.replace(',', '.')\r\n        const number = parseFloat(stringCopy)\r\n        return Number.isNaN(number) ? -1 : number\r\n    }\r\n\r\n    function calculateIE(shouldScroll = true, shouldDisplayError = true){\r\n        const ERROR_MESSAGE = 'ein oder mehrere Werte sind nicht gültig'\r\n\r\n        function areItemsTypeofNumber(...items){\r\n            /* for(const item of items)\r\n                if(toNumberFormat(item) === -1) return false\r\n            return true */\r\n            return items.every(item => toNumberFormat(item) !== -1)\r\n        }\r\n\r\n        function calculateKE(foodItem){\r\n            const grams = foodItem.slide1.grams\r\n            const carbohydratesPer100Grams = foodItem.slide1.carbohydratesPer100Grams\r\n\r\n            if(!areItemsTypeofNumber(grams, carbohydratesPer100Grams)) {\r\n                if(shouldDisplayError)\r\n                    alert(ERROR_MESSAGE)\r\n                return 0\r\n            }\r\n\r\n            return (toNumberFormat(grams) * (toNumberFormat(carbohydratesPer100Grams) / 100)) / 10\r\n        }\r\n\r\n        function calculateCorrectionInsulin(bloodSugar, targetBloodSugar, correctionFactor){\r\n            if(!areItemsTypeofNumber(bloodSugar, targetBloodSugar, correctionFactor)){\r\n                if(bloodSugar !== '' && shouldDisplayError)\r\n                    alert(ERROR_MESSAGE)\r\n                return 0\r\n            }\r\n            const correctionInsulin = (toNumberFormat(bloodSugar) - toNumberFormat(targetBloodSugar)) /\r\n                toNumberFormat(correctionFactor)\r\n            return correctionInsulin\r\n        }\r\n\r\n        // correction insulin\r\n        const correctionInsulin = calculateCorrectionInsulin(bloodSugar, targetBloodSugar, correctionFactor)\r\n        setTotalCorrectionInsulin(Math.round(correctionInsulin * 10) / 10)\r\n\r\n        // total KE | totalIntermealKE\r\n        let KE = 0, intermealKE = 0\r\n        for(const foodItem of foodItems){\r\n            const foodItemKE = calculateKE(foodItem)\r\n            KE += foodItemKE\r\n            intermealKE += foodItem.slide1.isIntermeal ? foodItemKE : 0\r\n        }\r\n        setTotalKE(Math.round(KE * 10) / 10)\r\n        setTotalIntermealKE(Math.round(intermealKE * 10) / 10)\r\n        setTotalMainMealKE(Math.round((KE - intermealKE) * 10) / 10)\r\n        \r\n        // total IE\r\n        if(!areItemsTypeofNumber(carbohydrateFactor)) {\r\n            if(shouldDisplayError)\r\n                alert(ERROR_MESSAGE)\r\n            return -1\r\n        }\r\n\r\n        let IE = KE * toNumberFormat(carbohydrateFactor)\r\n        IE += correctionInsulin\r\n        IE = Math.round(IE * 10) / 10\r\n\r\n        setTotalIE(IE)\r\n\r\n        // needed because of async state setting\r\n        if(shouldScroll)\r\n            setTimeout(() => {\r\n                outputRef.current.scrollIntoView({smooth:true})\r\n            }, 5)\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            {hasRerenderedSince60sec = true}\r\n            \r\n            <h1>Insulin Rechner</h1>\r\n            <p>\r\n                <button\r\n                    className='clear-data-button space-around'\r\n                    onClick = {clearData}\r\n                    >Daten löschen</button>\r\n\r\n                <button\r\n                    className='load-data-button'\r\n                    onClick = {loadData}\r\n                >Daten laden</button>\r\n            </p>\r\n\r\n            <hr className='destop-hr new-section-hr'/>\r\n\r\n            <FixedInformationSection \r\n                setBloodSugar={setBloodSugar}\r\n                setTargetBloodSugar={setTargetBloodSugar}\r\n                setCorrectionFactor={setCorrectionFactor}\r\n                setCarbohydrateFactor={setCarbohydrateFactor}\r\n                bloodSugar={bloodSugar}\r\n                targetBloodSugar={targetBloodSugar}\r\n                correctionFactor={correctionFactor}\r\n                carbohydrateFactor={carbohydrateFactor}\r\n            />\r\n\r\n            <hr className='destop-hr new-section-hr'/>\r\n\r\n            <ListSection \r\n                foodItems={foodItems}\r\n                foodNameSuggestions={foodNameSuggestions}\r\n                addNewFoodItem={addNewFoodItem}\r\n                handleIsIntermealChange={handleIsIntermealChange}\r\n                handleSlide1ValueChange={handleSlide1ValueChange}\r\n                handleSlide2ValueChange={handleSlide2ValueChange}\r\n                deleteFoodItem={deleteFoodItem}\r\n                handleSuggestionClick={handleSuggestionClick}\r\n                handleSlideChange={handleSlideChange}\r\n            />\r\n\r\n            <p style={{marginBottom:'20px'}}>\r\n                <button\r\n                    className='save-data-button space-around'\r\n                    onClick = {saveData}\r\n                >Daten speichen</button>\r\n\r\n                <button \r\n                    className='calculateIE-button'\r\n                    onClick={calculateIE}\r\n                >Berechne IE</button>\r\n            </p>\r\n\r\n            <Output \r\n                totalIE={totalIE}\r\n                totalMainMealKE={totalMainMealKE}\r\n                totalIntermealKE={totalIntermealKE}\r\n                totalKE={totalKE}\r\n                totalCorrectionInsulin={totalCorrectionInsulin}\r\n                outputRef={outputRef}\r\n            />\r\n        </div>  \r\n    )\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from \"react-dom\"\r\n\r\nimport App from './App.js'\r\n\r\nReactDOM.render(\r\n    <App />, \r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}